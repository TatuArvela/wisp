{"version":3,"file":"Theming-stories.35161dbb.iframe.bundle.js","mappings":";AAMA;AACA;;ACcA;AAbA;;AAcA;AATA;;;;;ACRA;AAGA;ACIA;AASA;AACA;AAGA;ACfA;AAGA;ACIA;AAGA;AACA;AAGA;AACA;AASA;AACA;AAGA;AACA;AAUA;AC1CA;AAGA","sources":["webpack://@tatuarvela/wisp/./src/themes/test/window/titleBar.ts","webpack://@tatuarvela/wisp/./src/themes/test/window/index.ts","webpack://@tatuarvela/wisp/./src/controls/AlertText.tsx","webpack://@tatuarvela/wisp/./src/controls/Button.tsx","webpack://@tatuarvela/wisp/./src/controls/ControlWrapper.tsx","webpack://@tatuarvela/wisp/./src/controls/ListBox.tsx","webpack://@tatuarvela/wisp/./src/controls/AlertButton.tsx"],"sourcesContent":["import { css } from 'styled-components';\n\nimport { TitleBarProps } from '../../../window/components/TitleBar';\nimport defaultTheme from '../../default/theme';\n\nconst TitleBar = css<TitleBarProps>`\n  ${defaultTheme.window.TitleBar}\n  background: ${(props) => (props.isActive ? 'rgb(214,19,107)' : 'grey')};\n  font-family: serif;\n`;\n\nexport default {\n  TitleBar,\n};\n","import { css } from 'styled-components';\n\nimport { WindowElementProps } from '../../../window/components/WindowElement';\nimport defaultTheme from '../../default/theme';\nimport { WindowThemeSection } from '../../types';\nimport titleBar from './titleBar';\n\nconst WindowContent = css`\n  ${defaultTheme.window.WindowContent}\n  font-family: serif;\n`;\n\nconst WindowElement = css<WindowElementProps>`\n  ${defaultTheme.window.WindowElement}\n  background: cyan;\n  border-color: cyan;\n  box-shadow: 0 0 0 1px white;\n`;\n\nconst window: Partial<WindowThemeSection> = {\n  ...titleBar,\n  WindowContent,\n  WindowElement,\n};\n\nexport default window;\n","import styled from 'styled-components';\n\nexport const AlertTextThemeProperties = ['AlertText'] as const;\n\nconst AlertText = styled.div`\n  ${(props) => props.theme.controls.AlertText}\n`;\n\nexport default AlertText;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const ButtonThemeProperties = ['Button', 'ButtonWrapper'] as const;\n\ninterface ButtonWrapperProps {\n  disabled?: boolean;\n  height?: number;\n  width?: number;\n}\n\nconst ButtonWrapper = styled.div<ButtonWrapperProps>`\n  ${(props) => props.theme.controls.ButtonWrapper}\n`;\n\nexport interface ButtonProps extends React.ComponentPropsWithoutRef<'button'> {\n  disabled?: boolean;\n  height?: number;\n  width?: number;\n}\n\nconst ButtonElement = styled.button`\n  ${(props) => props.theme.controls.Button}\n`;\n\nconst Button = ({ width, height, ...rest }: ButtonProps) => (\n  <ButtonWrapper style={{ width: `${width}px`, height: `${height}px` }}>\n    <ButtonElement {...rest} />\n  </ButtonWrapper>\n);\n\nexport default Button;\n","import styled from 'styled-components';\n\nexport const ControlWrapperThemeProperties = ['ControlWrapper'] as const;\n\nexport interface ControlWrapperProps {\n  inlineLabel?: boolean;\n}\n\n// internal\nconst ControlWrapper = styled.div<ControlWrapperProps>`\n  ${(props) => props.theme.controls.ControlWrapper}\n`;\n\nexport default ControlWrapper;\n","import { Listbox as HeadlessListBox } from '@headlessui/react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Portal } from 'react-portal';\nimport styled from 'styled-components';\n\nimport { useWindow } from '../window/WindowContext';\nimport ControlWrapper, { ControlWrapperProps } from './ControlWrapper';\n\nexport const ListBoxThemeProperties = [\n  'ListBoxButton',\n  'ListBoxLabel',\n  'ListBoxOption',\n  'ListBoxOptions',\n  'ListBoxWrapper',\n] as const;\n\nconst ListBoxWrapper = styled(ControlWrapper)`\n  ${(props) => props.theme.controls.ListBoxWrapper}\n`;\n\nconst ListBoxLabel = styled.label<{ disabled?: boolean }>`\n  ${(props) => props.theme.controls.ListBoxLabel}\n`;\n\nconst ListBoxButton = styled(HeadlessListBox.Button)<{ disabled?: boolean }>`\n  ${(props) => props.theme.controls.ListBoxButton}\n`;\n\nexport interface ListBoxOptionsProps {\n  open: boolean;\n  width: number;\n  left: number;\n  top: number;\n}\nconst ListBoxOptions = styled(HeadlessListBox.Options)<ListBoxOptionsProps>`\n  ${(props) => props.theme.controls.ListBoxOptions}\n`;\n\nconst ListBoxOption = styled(HeadlessListBox.Option)`\n  ${(props) => props.theme.controls.ListBoxOption}\n`;\n\ninterface ListBoxProps extends ControlWrapperProps {\n  disabled?: boolean;\n  label?: string;\n  onChange(value?: string): void;\n  options: string[];\n  value?: string;\n}\nconst ListBox = ({\n  disabled,\n  inlineLabel,\n  label,\n  onChange,\n  options,\n  value,\n}: ListBoxProps) => {\n  const window = useWindow();\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [sizes, setSizes] = useState<{\n    width: number;\n    left: number;\n    top: number;\n  }>({ width: 0, left: 0, top: 0 });\n\n  useEffect(() => {\n    if (window) {\n      const rect = buttonRef?.current.getBoundingClientRect() ?? {\n        width: 0,\n        left: 0,\n        top: 0,\n        height: 0,\n      };\n      setSizes({\n        width: rect.width,\n        left: rect.left,\n        top: rect.top + rect.height,\n      });\n    }\n  }, [window]);\n\n  return (\n    <HeadlessListBox\n      disabled={disabled}\n      value={value ?? ''}\n      onChange={onChange}\n    >\n      {({ open }) => (\n        <ListBoxWrapper inlineLabel={inlineLabel}>\n          {label && <ListBoxLabel disabled={disabled}>{label}</ListBoxLabel>}\n          <ListBoxButton disabled={disabled} ref={buttonRef}>\n            {value}\n          </ListBoxButton>\n          <Portal>\n            <ListBoxOptions open={open} {...sizes}>\n              {options.map((option) => (\n                <ListBoxOption key={option} value={option}>\n                  {option}\n                </ListBoxOption>\n              ))}\n            </ListBoxOptions>\n          </Portal>\n        </ListBoxWrapper>\n      )}\n    </HeadlessListBox>\n  );\n};\n\nexport default ListBox;\n","import styled from 'styled-components';\n\nimport Button from '../controls/Button';\n\nexport const AlertButtonThemeProperties = ['AlertButton'] as const;\n\nconst AlertButton = styled(Button)`\n  ${(props) => props.theme.controls.AlertButton}\n`;\n\nexport default AlertButton;\n"],"names":[],"sourceRoot":""}
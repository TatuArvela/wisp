{"version":3,"file":"AdvancedUsage-stories.a6abbb80.iframe.bundle.js","mappings":";AAgBA;AAGA;AACA;AAGA;ACZA;AAGA;AAUA;AAGA;ACfA;AAGA;AACA;AASA;ACXA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAQA;ACxBA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAQA;ACpBA;AAGA;AACA;AAGA;ACTA;AAGA;AAcA;AAGA;AC9BA;AAGA;ACDA;AAGA;ACOA;AAGA;AACA;AAGA;AACA;AAGA;AAiBA;AAGA","sources":["webpack://@tatuarvela/wisp/./src/controls/AddressBar.tsx","webpack://@tatuarvela/wisp/./src/controls/MenuBar.tsx","webpack://@tatuarvela/wisp/./src/controls/ProgressBar.tsx","webpack://@tatuarvela/wisp/./src/controls/ScrollbarHorizontal.tsx","webpack://@tatuarvela/wisp/./src/controls/ScrollbarVertical.tsx","webpack://@tatuarvela/wisp/./src/controls/ScrollableContent.tsx","webpack://@tatuarvela/wisp/./src/controls/StatusBar.tsx","webpack://@tatuarvela/wisp/./src/controls/StatusBarSection.tsx","webpack://@tatuarvela/wisp/./src/controls/Toolbar.tsx","webpack://@tatuarvela/wisp/./src/controls/ToolbarButton.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport const AddressBarThemeProperties = [\n  'AddressBar',\n  'AddressBarInput',\n] as const;\n\ninterface AddressBarProps {\n  children?: React.ReactNode;\n  disabled?: boolean;\n  onChange(value: string): void;\n  value?: string;\n}\n\nconst AddressBarInput = styled.input`\n  ${(props) => props.theme.controls.AddressBarInput}\n`;\n\nconst AddressBarElement = styled.div`\n  ${(props) => props.theme.controls.AddressBar}\n`;\n\nconst AddressBar = ({\n  children,\n  value,\n  disabled,\n  onChange,\n}: AddressBarProps) => {\n  return (\n    <AddressBarElement>\n      {children}\n      <AddressBarInput\n        value={value}\n        disabled={disabled}\n        onChange={(event) => onChange(event.target.value)}\n      />\n    </AddressBarElement>\n  );\n};\n\nexport default AddressBar;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const MenuBarThemeProperties = ['MenuBar', 'MenuBarThrobber'] as const;\n\ninterface MenuBarProps {\n  children?: React.ReactNode;\n  isThrobberAnimated?: boolean;\n}\n\nconst MenuBarElement = styled.div`\n  ${(props) => props.theme.controls.MenuBar}\n`;\n\nconst MenuBar = ({ children, isThrobberAnimated }: MenuBarProps) => {\n  return (\n    <MenuBarElement>\n      {children}\n      <MenuBarThrobber isAnimated={isThrobberAnimated} />\n    </MenuBarElement>\n  );\n};\n\nconst MenuBarThrobber = styled.div<{ isAnimated: boolean }>`\n  ${(props) => props.theme.controls.MenuBarThrobber}\n`;\n\nexport default MenuBar;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const ProgressBarThemeProperties = [\n  'ProgressBar',\n  'ProgressBarFill',\n] as const;\n\nconst ProgressBarFill = styled.div<{\n  disabled: boolean;\n  isIndeterminate: boolean;\n}>`\n  ${(props) => props.theme.controls.ProgressBarFill}\n`;\n\nconst ProgressBarElement = styled.div<{ disabled: boolean }>`\n  ${(props) => props.theme.controls.ProgressBar}\n`;\n\ninterface ProgressBarProps {\n  max?: number;\n  value?: number;\n  disabled?: boolean;\n}\n\nconst ProgressBar = ({\n  max = 1,\n  value,\n  disabled = false,\n}: ProgressBarProps) => {\n  const isIndeterminate = value === undefined;\n  const fillWidth = isIndeterminate ? undefined : `${(value / max) * 100}%`;\n\n  return (\n    <ProgressBarElement disabled={disabled}>\n      <ProgressBarFill\n        disabled={disabled}\n        isIndeterminate={isIndeterminate}\n        style={{ width: fillWidth }}\n      />\n    </ProgressBarElement>\n  );\n};\n\nexport default ProgressBar;\n","import React, { useRef } from 'react';\nimport styled from 'styled-components';\n\nimport { ScrollPositions } from './types';\n\nexport const ScrollbarHorizontalThemeProperties = [\n  'ScrollbarHorizontalWrapper',\n  'ScrollbarHorizontalTrack',\n  'ScrollbarHorizontalThumb',\n  'ScrollLeftButton',\n  'ScrollRightButton',\n] as const;\n\nconst ScrollLeftButton = styled.button`\n  ${(props) => props.theme.controls.ScrollLeftButton}\n`;\n\nconst ScrollRightButton = styled.button`\n  ${(props) => props.theme.controls.ScrollRightButton}\n`;\n\nconst ScrollbarHorizontalTrack = styled.div`\n  ${(props) => props.theme.controls.ScrollbarHorizontalTrack}\n`;\n\nconst ScrollbarHorizontalThumb = styled.div`\n  ${(props) => props.theme.controls.ScrollbarHorizontalThumb}\n`;\n\nconst ScrollbarHorizontalWrapper = styled.div`\n  ${(props) => props.theme.controls.ScrollbarHorizontalWrapper}\n`;\n\nexport interface ScrollbarHorizontalProps {\n  width: number;\n  scrollPositions: ScrollPositions;\n  moveScrollbar: (movement: number, smooth?: boolean) => void;\n}\nconst ScrollbarHorizontal = ({\n  width,\n  scrollPositions,\n  moveScrollbar,\n}: ScrollbarHorizontalProps) => {\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const thumbRef = useRef<HTMLDivElement>(null);\n\n  const onThumbMouseDown = (e) => {\n    e.preventDefault();\n\n    const onMouseMove = (event: MouseEvent) => {\n      event.preventDefault();\n      if (event.button === 0) {\n        const ratio = width / thumbRef.current.getBoundingClientRect().width;\n        moveScrollbar(event.movementX * ratio);\n      }\n    };\n\n    const onMouseUp = () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('mouseup', this);\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('mouseup', onMouseUp);\n  };\n\n  const onButtonMouseDown = (amount: number) => () => {\n    moveScrollbar(amount, true);\n    const interval = setInterval(() => moveScrollbar(amount, true), 250);\n\n    const onMouseUp = () => {\n      clearInterval(interval);\n    };\n\n    document.addEventListener('mouseup', onMouseUp);\n  };\n\n  const getThumbStyle = () => {\n    const thumbWidth = `calc(100% * (${width} / ${scrollPositions.scrollWidth}))`;\n    const leftPosition = `calc(${\n      scrollPositions.scrollLeft / scrollPositions.scrollLeftMax\n    } * (100% - ${thumbWidth}))`;\n    return {\n      width: thumbWidth,\n      left: leftPosition,\n    };\n  };\n\n  return (\n    <ScrollbarHorizontalWrapper\n      style={{ width: width + 'px' }}\n      ref={wrapperRef}\n    >\n      <ScrollLeftButton onMouseDown={onButtonMouseDown(-50)} />\n      <ScrollbarHorizontalTrack>\n        <ScrollbarHorizontalThumb\n          ref={thumbRef}\n          style={getThumbStyle()}\n          onMouseDown={onThumbMouseDown}\n        />\n      </ScrollbarHorizontalTrack>\n      <ScrollRightButton onMouseDown={onButtonMouseDown(50)} />\n    </ScrollbarHorizontalWrapper>\n  );\n};\n\nexport default ScrollbarHorizontal;\n","import React, { useRef } from 'react';\nimport styled from 'styled-components';\n\nimport { ScrollPositions } from './types';\n\nexport const ScrollbarVerticalThemeProperties = [\n  'ScrollbarVerticalWrapper',\n  'ScrollbarVerticalTrack',\n  'ScrollbarVerticalThumb',\n  'ScrollDownButton',\n  'ScrollUpButton',\n] as const;\n\nconst ScrollUpButton = styled.button`\n  ${(props) => props.theme.controls.ScrollUpButton}\n`;\n\nconst ScrollDownButton = styled.button`\n  ${(props) => props.theme.controls.ScrollDownButton}\n`;\n\nconst ScrollbarVerticalTrack = styled.div`\n  ${(props) => props.theme.controls.ScrollbarVerticalTrack}\n`;\n\nconst ScrollbarVerticalThumb = styled.div`\n  ${(props) => props.theme.controls.ScrollbarVerticalThumb}\n`;\n\nconst ScrollbarVerticalWrapper = styled.div`\n  ${(props) => props.theme.controls.ScrollbarVerticalWrapper}\n`;\n\nexport interface ScrollbarVerticalProps {\n  height: number;\n  scrollPositions: ScrollPositions;\n  moveScrollbar: (movement: number, smooth?: boolean) => void;\n}\nconst ScrollbarVertical = ({\n  height,\n  scrollPositions,\n  moveScrollbar,\n}: ScrollbarVerticalProps) => {\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const thumbRef = useRef<HTMLDivElement>(null);\n\n  const onThumbMouseDown = (e) => {\n    e.preventDefault();\n\n    const onMouseMove = (event: MouseEvent) => {\n      event.preventDefault();\n      if (event.button === 0) {\n        const ratio = height / thumbRef.current.getBoundingClientRect().height;\n        moveScrollbar(event.movementY * ratio);\n      }\n    };\n\n    const onMouseUp = () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('mouseup', this);\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('mouseup', onMouseUp);\n  };\n\n  const onButtonMouseDown = (amount: number) => () => {\n    moveScrollbar(amount, true);\n    const interval = setInterval(() => moveScrollbar(amount, true), 250);\n\n    const onMouseUp = () => {\n      clearInterval(interval);\n    };\n\n    document.addEventListener('mouseup', onMouseUp);\n  };\n\n  const getThumbStyle = () => {\n    const thumbHeight = `calc(100% * (${height} / ${scrollPositions.scrollHeight}))`;\n    const topPosition = `calc(${\n      scrollPositions.scrollTop / scrollPositions.scrollTopMax\n    } * (100% - ${thumbHeight}))`;\n    return {\n      height: thumbHeight,\n      top: topPosition,\n    };\n  };\n\n  return (\n    <ScrollbarVerticalWrapper\n      style={{ height: height + 'px' }}\n      ref={wrapperRef}\n    >\n      <ScrollUpButton onMouseDown={onButtonMouseDown(-50)} />\n      <ScrollbarVerticalTrack>\n        <ScrollbarVerticalThumb\n          ref={thumbRef}\n          style={getThumbStyle()}\n          onMouseDown={onThumbMouseDown}\n        />\n      </ScrollbarVerticalTrack>\n      <ScrollDownButton onMouseDown={onButtonMouseDown(50)} />\n    </ScrollbarVerticalWrapper>\n  );\n};\n\nexport default ScrollbarVertical;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nimport ScrollbarHorizontal from './ScrollbarHorizontal';\nimport ScrollbarVertical from './ScrollbarVertical';\nimport { ScrollPositions } from './types';\n\nexport const ScrollableContentThemeProperties = [\n  'ScrollableContentView',\n  'ScrollableContentWrapper',\n] as const;\n\nexport interface ScrollableContentViewProps {\n  children?: React.ReactNode;\n  horizontal?: boolean;\n  vertical?: boolean;\n}\nconst ScrollableContentView = styled.div<ScrollableContentViewProps>`\n  ${(props) => props.theme.controls.ScrollableContentView}\n`;\n\nconst ScrollableContentWrapper = styled.div`\n  ${(props) => props.theme.controls.ScrollableContentWrapper}\n`;\n\nconst mapScrollPositions = (target?: ScrollPositions) => ({\n  scrollHeight: target?.scrollHeight ?? 0,\n  scrollLeft: target?.scrollLeft ?? 0,\n  scrollLeftMax: target?.scrollLeftMax ?? 0,\n  scrollTop: target?.scrollTop ?? 0,\n  scrollTopMax: target?.scrollTopMax ?? 0,\n  scrollWidth: target?.scrollWidth ?? 0,\n});\n\nexport interface ScrollableContentProps {\n  children?: React.ReactNode;\n  horizontal?: boolean;\n  vertical?: boolean;\n}\nconst ScrollableContent = ({\n  children,\n  horizontal,\n  vertical,\n}: ScrollableContentProps) => {\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const viewRef = useRef<HTMLDivElement>(null);\n\n  const [viewWidth, setViewWidth] = useState<number>(0);\n  const [viewHeight, setViewHeight] = useState<number>(0);\n  const [scrollPositions, setScrollPositions] = useState<ScrollPositions>();\n  const [showHorizontal, setShowHorizontal] = useState<boolean>();\n  const [showVertical, setShowVertical] = useState<boolean>();\n\n  const updateState = useCallback(() => {\n    setViewWidth(viewRef.current.getBoundingClientRect().width);\n    setViewHeight(viewRef.current.getBoundingClientRect().height);\n    setScrollPositions(\n      mapScrollPositions(viewRef.current as unknown as ScrollPositions)\n    );\n    setShowHorizontal(\n      horizontal &&\n        viewRef.current.scrollWidth >\n          wrapperRef.current.getBoundingClientRect().width\n    );\n    setShowVertical(\n      vertical &&\n        viewRef.current.scrollHeight >\n          wrapperRef.current.getBoundingClientRect().height\n    );\n  }, [horizontal, vertical]);\n\n  const resizeObserver = useRef(\n    new ResizeObserver((entries) => {\n      updateState();\n    })\n  );\n\n  useEffect(() => {\n    const observer = resizeObserver.current;\n    const view = viewRef?.current;\n    if (view) {\n      updateState();\n      observer.observe(view);\n    }\n    return () => observer.unobserve(view);\n  }, [updateState]);\n\n  const scrollHandler = (e) => {\n    setScrollPositions(\n      mapScrollPositions(viewRef.current as unknown as ScrollPositions)\n    );\n  };\n\n  const moveScrollPosition = (\n    movementX: number,\n    movementY: number,\n    smooth?: boolean\n  ) => {\n    viewRef.current.scrollTo({\n      left: Math.max(\n        Math.min(\n          viewRef.current.scrollLeft + movementX,\n          (viewRef.current as unknown as ScrollPositions).scrollLeftMax\n        ),\n        0\n      ),\n      top: Math.max(\n        Math.min(\n          viewRef.current.scrollTop + movementY,\n          (viewRef.current as unknown as ScrollPositions).scrollTopMax\n        ),\n        0\n      ),\n      behavior: smooth ? 'smooth' : undefined,\n    });\n  };\n\n  return (\n    <ScrollableContentWrapper ref={wrapperRef}>\n      <ScrollableContentView\n        ref={viewRef}\n        vertical={showVertical}\n        horizontal={showHorizontal}\n        onScroll={scrollHandler}\n      >\n        {children}\n      </ScrollableContentView>\n      {showVertical && (\n        <ScrollbarVertical\n          height={viewHeight}\n          scrollPositions={scrollPositions}\n          moveScrollbar={(movementY, smooth) =>\n            moveScrollPosition(0, movementY, smooth)\n          }\n        />\n      )}\n      {showHorizontal && (\n        <ScrollbarHorizontal\n          width={viewWidth}\n          scrollPositions={scrollPositions}\n          moveScrollbar={(movementX, smooth) =>\n            moveScrollPosition(movementX, 0, smooth)\n          }\n        />\n      )}\n    </ScrollableContentWrapper>\n  );\n};\n\nexport default ScrollableContent;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { windowResizeHandler } from '../window/handlers/windowResizeHandler';\nimport { useWindowManager } from '../windowManager/hooks';\nimport { Direction, WindowType } from '../windowManager/types';\n\nexport const StatusBarThemeProperties = ['ResizeHandle', 'StatusBar'] as const;\n\ninterface StatusBarProps {\n  children?: React.ReactNode;\n  showResizeHandle?: boolean;\n  window?: WindowType;\n}\n\nconst StatusBarElement = styled.div`\n  ${(props) => props.theme.controls.StatusBar}\n`;\n\nconst StatusBar = ({ children, showResizeHandle, window }: StatusBarProps) => {\n  return (\n    <StatusBarElement>\n      {children}\n      {showResizeHandle && <ResizeHandle window={window} />}\n    </StatusBarElement>\n  );\n};\n\ninterface ResizeHandleProps {\n  window: WindowType;\n}\n\nconst ResizeHandleElement = styled.div`\n  ${(props) => props.theme.controls.ResizeHandle}\n`;\n\nconst ResizeHandle = ({ window }: ResizeHandleProps): JSX.Element => {\n  const windowManager = useWindowManager();\n  const eventHandler = windowResizeHandler(windowManager, window);\n\n  return (\n    <ResizeHandleElement onMouseDown={(e) => eventHandler(e, Direction.SE)} />\n  );\n};\n\nexport default StatusBar;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const StatusBarSectionThemeProperties = ['StatusBarSection'] as const;\n\nconst StatusBarSectionElement = styled.div<{ hasSetWidth: boolean }>`\n  ${(props) => props.theme.controls.StatusBarSection}\n`;\n\nexport const StatusBarSection = ({\n  width,\n  children,\n}: {\n  width?: string;\n  children?: React.ReactNode;\n}) => (\n  <StatusBarSectionElement\n    hasSetWidth={width !== undefined}\n    style={{ width: width }}\n  >\n    {children}\n  </StatusBarSectionElement>\n);\n\nexport default StatusBarSection;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface ToolbarProps {\n  children?: React.ReactNode;\n}\n\nconst ToolbarElement = styled.div`\n  ${(props) => props.theme.controls.Toolbar}\n`;\n\nconst Toolbar = ({ children }: ToolbarProps) => {\n  return <ToolbarElement>{children}</ToolbarElement>;\n};\n\nexport default Toolbar;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Icon } from '../icons/types';\nimport { getIconFileForSize } from '../icons/utils';\n\nexport const ToolbarButtonThemeProperties = [\n  'ToolbarButton',\n  'ToolbarButtonWrapper',\n  'ToolbarButtonLabel',\n  'ToolbarButtonIcon',\n] as const;\n\ninterface ToolbarButtonWrapperProps {\n  disabled?: boolean;\n}\n\nconst ToolbarButtonWrapper = styled.div<ToolbarButtonWrapperProps>`\n  ${(props) => props.theme.controls.ToolbarButtonWrapper}\n`;\n\nconst ToolbarButtonLabel = styled.div`\n  ${(props) => props.theme.controls.ToolbarButtonLabel}\n`;\n\nconst ToolbarButtonIconElement = styled.img`\n  ${(props) => props.theme.controls.ToolbarButtonIcon}\n`;\n\nconst ToolbarButtonIcon = ({ icon }: { icon: Icon }) => {\n  if (!icon) {\n    return null;\n  }\n\n  const iconFile = getIconFileForSize(icon);\n  return <ToolbarButtonIconElement src={iconFile} alt=\"Window icon\" />;\n};\n\ninterface ToolbarButtonProps extends React.ComponentPropsWithoutRef<'button'> {\n  disabled?: boolean;\n  onClick?(): void;\n  icon?: Icon;\n  label?: string;\n}\n\nconst ToolbarButtonElement = styled.button`\n  ${(props) => props.theme.controls.ToolbarButton}\n`;\n\nconst ToolbarButton = ({\n  disabled,\n  icon,\n  label,\n  ...rest\n}: ToolbarButtonProps) => {\n  return (\n    <ToolbarButtonWrapper disabled={disabled}>\n      <ToolbarButtonElement disabled={disabled} {...rest}>\n        {icon && <ToolbarButtonIcon icon={icon} />}\n        {label && <ToolbarButtonLabel>{label}</ToolbarButtonLabel>}\n      </ToolbarButtonElement>\n    </ToolbarButtonWrapper>\n  );\n};\n\nexport default ToolbarButton;\n"],"names":[],"sourceRoot":""}
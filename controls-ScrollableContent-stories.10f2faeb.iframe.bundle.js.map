{"version":3,"file":"controls-ScrollableContent-stories.10f2faeb.iframe.bundle.js","mappings":";AAcA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAQA;ACxBA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAQA;ACpBA;AAGA;AACA;AAGA","sources":["webpack://@tatuarvela/wisp/./src/controls/ScrollbarHorizontal.tsx","webpack://@tatuarvela/wisp/./src/controls/ScrollbarVertical.tsx","webpack://@tatuarvela/wisp/./src/controls/ScrollableContent.tsx"],"sourcesContent":["import React, { useRef } from 'react';\nimport styled from 'styled-components';\n\nimport { ScrollPositions } from './types';\n\nexport const ScrollbarHorizontalThemeProperties = [\n  'ScrollbarHorizontalWrapper',\n  'ScrollbarHorizontalTrack',\n  'ScrollbarHorizontalThumb',\n  'ScrollLeftButton',\n  'ScrollRightButton',\n] as const;\n\nconst ScrollLeftButton = styled.button`\n  ${(props) => props.theme.controls.ScrollLeftButton}\n`;\n\nconst ScrollRightButton = styled.button`\n  ${(props) => props.theme.controls.ScrollRightButton}\n`;\n\nconst ScrollbarHorizontalTrack = styled.div`\n  ${(props) => props.theme.controls.ScrollbarHorizontalTrack}\n`;\n\nconst ScrollbarHorizontalThumb = styled.div`\n  ${(props) => props.theme.controls.ScrollbarHorizontalThumb}\n`;\n\nconst ScrollbarHorizontalWrapper = styled.div`\n  ${(props) => props.theme.controls.ScrollbarHorizontalWrapper}\n`;\n\nexport interface ScrollbarHorizontalProps {\n  width: number;\n  scrollPositions: ScrollPositions;\n  moveScrollbar: (movement: number, smooth?: boolean) => void;\n}\nconst ScrollbarHorizontal = ({\n  width,\n  scrollPositions,\n  moveScrollbar,\n}: ScrollbarHorizontalProps) => {\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const thumbRef = useRef<HTMLDivElement>(null);\n\n  const onThumbMouseDown = (e) => {\n    e.preventDefault();\n\n    const onMouseMove = (event: MouseEvent) => {\n      event.preventDefault();\n      if (event.button === 0) {\n        const ratio = width / thumbRef.current.getBoundingClientRect().width;\n        moveScrollbar(event.movementX * ratio);\n      }\n    };\n\n    const onMouseUp = () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('mouseup', this);\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('mouseup', onMouseUp);\n  };\n\n  const onButtonMouseDown = (amount: number) => () => {\n    moveScrollbar(amount, true);\n    const interval = setInterval(() => moveScrollbar(amount, true), 250);\n\n    const onMouseUp = () => {\n      clearInterval(interval);\n    };\n\n    document.addEventListener('mouseup', onMouseUp);\n  };\n\n  const getThumbStyle = () => {\n    const thumbWidth = `calc(100% * (${width} / ${scrollPositions.scrollWidth}))`;\n    const leftPosition = `calc(${\n      scrollPositions.scrollLeft / scrollPositions.scrollLeftMax\n    } * (100% - ${thumbWidth}))`;\n    return {\n      width: thumbWidth,\n      left: leftPosition,\n    };\n  };\n\n  return (\n    <ScrollbarHorizontalWrapper\n      style={{ width: width + 'px' }}\n      ref={wrapperRef}\n    >\n      <ScrollLeftButton onMouseDown={onButtonMouseDown(-50)} />\n      <ScrollbarHorizontalTrack>\n        <ScrollbarHorizontalThumb\n          ref={thumbRef}\n          style={getThumbStyle()}\n          onMouseDown={onThumbMouseDown}\n        />\n      </ScrollbarHorizontalTrack>\n      <ScrollRightButton onMouseDown={onButtonMouseDown(50)} />\n    </ScrollbarHorizontalWrapper>\n  );\n};\n\nexport default ScrollbarHorizontal;\n","import React, { useRef } from 'react';\nimport styled from 'styled-components';\n\nimport { ScrollPositions } from './types';\n\nexport const ScrollbarVerticalThemeProperties = [\n  'ScrollbarVerticalWrapper',\n  'ScrollbarVerticalTrack',\n  'ScrollbarVerticalThumb',\n  'ScrollDownButton',\n  'ScrollUpButton',\n] as const;\n\nconst ScrollUpButton = styled.button`\n  ${(props) => props.theme.controls.ScrollUpButton}\n`;\n\nconst ScrollDownButton = styled.button`\n  ${(props) => props.theme.controls.ScrollDownButton}\n`;\n\nconst ScrollbarVerticalTrack = styled.div`\n  ${(props) => props.theme.controls.ScrollbarVerticalTrack}\n`;\n\nconst ScrollbarVerticalThumb = styled.div`\n  ${(props) => props.theme.controls.ScrollbarVerticalThumb}\n`;\n\nconst ScrollbarVerticalWrapper = styled.div`\n  ${(props) => props.theme.controls.ScrollbarVerticalWrapper}\n`;\n\nexport interface ScrollbarVerticalProps {\n  height: number;\n  scrollPositions: ScrollPositions;\n  moveScrollbar: (movement: number, smooth?: boolean) => void;\n}\nconst ScrollbarVertical = ({\n  height,\n  scrollPositions,\n  moveScrollbar,\n}: ScrollbarVerticalProps) => {\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const thumbRef = useRef<HTMLDivElement>(null);\n\n  const onThumbMouseDown = (e) => {\n    e.preventDefault();\n\n    const onMouseMove = (event: MouseEvent) => {\n      event.preventDefault();\n      if (event.button === 0) {\n        const ratio = height / thumbRef.current.getBoundingClientRect().height;\n        moveScrollbar(event.movementY * ratio);\n      }\n    };\n\n    const onMouseUp = () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('mouseup', this);\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('mouseup', onMouseUp);\n  };\n\n  const onButtonMouseDown = (amount: number) => () => {\n    moveScrollbar(amount, true);\n    const interval = setInterval(() => moveScrollbar(amount, true), 250);\n\n    const onMouseUp = () => {\n      clearInterval(interval);\n    };\n\n    document.addEventListener('mouseup', onMouseUp);\n  };\n\n  const getThumbStyle = () => {\n    const thumbHeight = `calc(100% * (${height} / ${scrollPositions.scrollHeight}))`;\n    const topPosition = `calc(${\n      scrollPositions.scrollTop / scrollPositions.scrollTopMax\n    } * (100% - ${thumbHeight}))`;\n    return {\n      height: thumbHeight,\n      top: topPosition,\n    };\n  };\n\n  return (\n    <ScrollbarVerticalWrapper\n      style={{ height: height + 'px' }}\n      ref={wrapperRef}\n    >\n      <ScrollUpButton onMouseDown={onButtonMouseDown(-50)} />\n      <ScrollbarVerticalTrack>\n        <ScrollbarVerticalThumb\n          ref={thumbRef}\n          style={getThumbStyle()}\n          onMouseDown={onThumbMouseDown}\n        />\n      </ScrollbarVerticalTrack>\n      <ScrollDownButton onMouseDown={onButtonMouseDown(50)} />\n    </ScrollbarVerticalWrapper>\n  );\n};\n\nexport default ScrollbarVertical;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nimport ScrollbarHorizontal from './ScrollbarHorizontal';\nimport ScrollbarVertical from './ScrollbarVertical';\nimport { ScrollPositions } from './types';\n\nexport const ScrollableContentThemeProperties = [\n  'ScrollableContentView',\n  'ScrollableContentWrapper',\n] as const;\n\nexport interface ScrollableContentViewProps {\n  children?: React.ReactNode;\n  horizontal?: boolean;\n  vertical?: boolean;\n}\nconst ScrollableContentView = styled.div<ScrollableContentViewProps>`\n  ${(props) => props.theme.controls.ScrollableContentView}\n`;\n\nconst ScrollableContentWrapper = styled.div`\n  ${(props) => props.theme.controls.ScrollableContentWrapper}\n`;\n\nconst mapScrollPositions = (target?: ScrollPositions) => ({\n  scrollHeight: target?.scrollHeight ?? 0,\n  scrollLeft: target?.scrollLeft ?? 0,\n  scrollLeftMax: target?.scrollLeftMax ?? 0,\n  scrollTop: target?.scrollTop ?? 0,\n  scrollTopMax: target?.scrollTopMax ?? 0,\n  scrollWidth: target?.scrollWidth ?? 0,\n});\n\nexport interface ScrollableContentProps {\n  children?: React.ReactNode;\n  horizontal?: boolean;\n  vertical?: boolean;\n}\nexport const ScrollableContent = ({\n  children,\n  horizontal,\n  vertical,\n}: ScrollableContentProps) => {\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const viewRef = useRef<HTMLDivElement>(null);\n\n  const [viewWidth, setViewWidth] = useState<number>(0);\n  const [viewHeight, setViewHeight] = useState<number>(0);\n  const [scrollPositions, setScrollPositions] = useState<ScrollPositions>();\n  const [showHorizontal, setShowHorizontal] = useState<boolean>();\n  const [showVertical, setShowVertical] = useState<boolean>();\n\n  const updateState = useCallback(() => {\n    setViewWidth(viewRef.current.getBoundingClientRect().width);\n    setViewHeight(viewRef.current.getBoundingClientRect().height);\n    setScrollPositions(\n      mapScrollPositions(viewRef.current as unknown as ScrollPositions)\n    );\n    setShowHorizontal(\n      horizontal &&\n        viewRef.current.scrollWidth >\n          wrapperRef.current.getBoundingClientRect().width\n    );\n    setShowVertical(\n      vertical &&\n        viewRef.current.scrollHeight >\n          wrapperRef.current.getBoundingClientRect().height\n    );\n  }, [horizontal, vertical]);\n\n  const resizeObserver = useRef(\n    new ResizeObserver((entries) => {\n      updateState();\n    })\n  );\n\n  useEffect(() => {\n    const observer = resizeObserver.current;\n    const view = viewRef?.current;\n    if (view) {\n      updateState();\n      observer.observe(view);\n    }\n    return () => observer.unobserve(view);\n  }, [updateState]);\n\n  const scrollHandler = (e) => {\n    setScrollPositions(\n      mapScrollPositions(viewRef.current as unknown as ScrollPositions)\n    );\n  };\n\n  const moveScrollPosition = (\n    movementX: number,\n    movementY: number,\n    smooth?: boolean\n  ) => {\n    viewRef.current.scrollTo({\n      left: Math.max(\n        Math.min(\n          viewRef.current.scrollLeft + movementX,\n          (viewRef.current as unknown as ScrollPositions).scrollLeftMax\n        ),\n        0\n      ),\n      top: Math.max(\n        Math.min(\n          viewRef.current.scrollTop + movementY,\n          (viewRef.current as unknown as ScrollPositions).scrollTopMax\n        ),\n        0\n      ),\n      behavior: smooth ? 'smooth' : undefined,\n    });\n  };\n\n  return (\n    <ScrollableContentWrapper ref={wrapperRef}>\n      <ScrollableContentView\n        ref={viewRef}\n        vertical={showVertical}\n        horizontal={showHorizontal}\n        onScroll={scrollHandler}\n      >\n        {children}\n      </ScrollableContentView>\n      {showVertical && (\n        <ScrollbarVertical\n          height={viewHeight}\n          scrollPositions={scrollPositions}\n          moveScrollbar={(movementY, smooth) =>\n            moveScrollPosition(0, movementY, smooth)\n          }\n        />\n      )}\n      {showHorizontal && (\n        <ScrollbarHorizontal\n          width={viewWidth}\n          scrollPositions={scrollPositions}\n          moveScrollbar={(movementX, smooth) =>\n            moveScrollPosition(movementX, 0, smooth)\n          }\n        />\n      )}\n    </ScrollableContentWrapper>\n  );\n};\n\nexport default ScrollableContent;\n"],"names":[],"sourceRoot":""}
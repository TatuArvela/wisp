{"version":3,"file":"682.1ac81234.iframe.bundle.js","mappings":"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","sources":["webpack://@tatuarvela/wisp/./src/elements/Taskbar/TaskbarButton.tsx","webpack://@tatuarvela/wisp/./src/elements/Taskbar/Taskbar.tsx","webpack://@tatuarvela/wisp/./src/elements/VersionInfo.tsx","webpack://@tatuarvela/wisp/./src/windowManager/Viewport.tsx","webpack://@tatuarvela/wisp/./src/elements/Desktop.tsx","webpack://@tatuarvela/wisp/./src/themes/default/controls/addressBar.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/alertButton.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/alertText.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/button.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/label.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/checkbox.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/comboBox.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/controlWrapper.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/divider.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/fieldset.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/listBox.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/menuBar.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/scrollableContent.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/scrollbarHorizontal.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/scrollbarVertical.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/statusBar.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/statusBarSection.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/textarea.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/textInput.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/timeInput.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/toolbar.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/toolbarButton.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/well.ts","webpack://@tatuarvela/wisp/./src/themes/default/controls/index.ts","webpack://@tatuarvela/wisp/./src/themes/default/elements/taskbar/taskbar.ts","webpack://@tatuarvela/wisp/./src/themes/default/elements/taskbar/taskbarButton.ts","webpack://@tatuarvela/wisp/./src/themes/default/elements/versionInfo.ts","webpack://@tatuarvela/wisp/./src/themes/default/elements/index.ts","webpack://@tatuarvela/wisp/./src/themes/default/window/components/resizeBorder.ts","webpack://@tatuarvela/wisp/./src/themes/default/window/components/titleBar.ts","webpack://@tatuarvela/wisp/./src/themes/default/window/components/titleBarButtons.ts","webpack://@tatuarvela/wisp/./src/themes/default/window/window.ts","webpack://@tatuarvela/wisp/./src/themes/default/window/windowContent.ts","webpack://@tatuarvela/wisp/./src/themes/default/theme.ts","webpack://@tatuarvela/wisp/./src/window/components/ResizeBorder.tsx","webpack://@tatuarvela/wisp/./src/window/components/TitleBarButtons.tsx","webpack://@tatuarvela/wisp/./src/window/components/TitleBar.tsx","webpack://@tatuarvela/wisp/./src/window/components/WindowContent.tsx","webpack://@tatuarvela/wisp/./src/window/components/WindowElement.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nimport type { Icon } from '../../icons/types';\nimport { getIconFileForSize } from '../../icons/utils';\n\nexport type TaskbarButtonProps = {\n  active: boolean;\n  icon?: Icon;\n  title?: string;\n  onClick(): void;\n};\n\nconst TaskbarButtonElement = styled.button<TaskbarButtonProps>`\n  ${(props) => props.theme.elements.TaskbarButton}\n`;\n\nconst TaskbarButtonTitle = styled.div`\n  ${(props) => props.theme.elements.TaskbarButtonTitle}\n`;\n\nconst TaskbarButtonIconElement = styled.img`\n  ${(props) => props.theme.elements.TaskbarButtonIcon}\n`;\n\nconst TaskbarButtonIcon = ({ icon }: { icon: Icon }) => {\n  if (!icon) {\n    return null;\n  }\n\n  const iconFile = getIconFileForSize(icon);\n  return <TaskbarButtonIconElement src={iconFile} alt=\"Window icon\" />;\n};\n\nconst TaskbarButton = ({\n  active,\n  icon,\n  title,\n  onClick,\n}: TaskbarButtonProps) => {\n  return (\n    <TaskbarButtonElement type=\"button\" active={active} onClick={onClick}>\n      <TaskbarButtonIcon icon={icon} />\n      <TaskbarButtonTitle>{title}</TaskbarButtonTitle>\n    </TaskbarButtonElement>\n  );\n};\n\nexport default TaskbarButton;\n","import React, { useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport { useWindowManager } from '../../windowManager/hooks';\nimport { WindowType } from '../../windowManager/types';\nimport TaskbarButton from './TaskbarButton';\n\nconst TaskbarElement = styled.div`\n  ${(props) => props.theme.elements.Taskbar}\n`;\n\nconst Taskbar = (): JSX.Element => {\n  const { activeWindowId, windows, restoreWindow, setViewportWindowMargins } =\n    useWindowManager();\n  const taskbarRef = React.useRef<HTMLDivElement>();\n\n  const getTaskbarHeight = useCallback(\n    () => taskbarRef.current?.offsetHeight || 0,\n    [taskbarRef]\n  );\n\n  useEffect(() => {\n    setViewportWindowMargins({ bottom: getTaskbarHeight() });\n    return () => setViewportWindowMargins({ bottom: 0 });\n  }, [getTaskbarHeight, setViewportWindowMargins]);\n\n  const mapButtons = ([id, window]: [id: string, window: WindowType]) => (\n    <TaskbarButton\n      key={id}\n      onClick={() => restoreWindow(id)}\n      active={id === activeWindowId}\n      icon={window.icon}\n      title={window.title}\n    />\n  );\n\n  return (\n    <TaskbarElement ref={taskbarRef}>\n      {Array.from(windows.entries())\n        .filter(([id, window]) => window.showAsTask)\n        .map(mapButtons)}\n    </TaskbarElement>\n  );\n};\n\nexport default Taskbar;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst VersionInformationElement = styled.p`\n  ${(props) => props.theme.elements.VersionInfo}\n`;\n\nconst VersionInfo = () => {\n  const version =\n    process.env.PACKAGE_VERSION || process.env.STORYBOOK_PACKAGE_VERSION;\n\n  if (!version) {\n    return null;\n  }\n  return (\n    <VersionInformationElement>\n      Wisp Version {version}\n    </VersionInformationElement>\n  );\n};\nexport default VersionInfo;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nconst ViewportElement = styled.div`\n  box-sizing: border-box;\n  height: 100%;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n`;\n\nconst Viewport = React.forwardRef<HTMLDivElement, Props>(\n  ({ children }: Props, ref) => (\n    <ViewportElement ref={ref}>{children}</ViewportElement>\n  )\n);\n\nexport default Viewport;\n","import styled from 'styled-components';\n\nconst Desktop = styled.div`\n  ${(props) => props.theme.elements.Desktop}\n`;\n\nexport default Desktop;\n","import { css } from 'styled-components';\n\nexport const AddressBar = css`\n  align-items: center;\n  background: white;\n  border: 1px solid gray;\n  box-shadow: -1px -1px 0 lightgray;\n  box-sizing: border-box;\n  display: flex;\n  font-size: 14px;\n  font-family: sans-serif;\n  gap: 4px;\n  height: 28px;\n  margin-top: -2px;\n  margin-bottom: 2px;\n  padding: 2px;\n  text-align: left;\n  user-select: none;\n  white-space: nowrap;\n  width: 100%;\n`;\n\nexport const AddressBarInput = css<{ disabled?: boolean }>`\n  border-radius: 1ps;\n  border: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n  box-sizing: border-box;\n  color: ${(props) => (props.disabled ? 'gray' : 'black')};\n  cursor: text;\n  font-size: 12px;\n  height: 22px;\n  outline: none;\n  width: 100%;\n`;\n","import { css } from 'styled-components';\n\nexport const AlertButton = css`\n  width: 60px;\n  margin: auto;\n`;\n","import { css } from 'styled-components';\n\nexport const AlertText = css`\n  display: flex;\n  flex-grow: 1;\n  font-family: sans-serif;\n  align-items: center;\n`;\n","import { css } from 'styled-components';\n\nexport const ButtonWrapper = css`\n  display: inherit;\n  padding: 0 1px 1px 0;\n`;\n\nconst activeStyle = css`\n  &:active {\n    box-shadow: none;\n    position: relative;\n    left: 1px;\n    top: 1px;\n  }\n`;\n\nexport const Button = css<{ disabled?: boolean }>`\n  background: white;\n  border-radius: 2px;\n  border: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n  box-shadow: 1px 1px 0 0 gray;\n  color: ${(props) => (props.disabled ? 'gray' : 'black')};\n  font-size: 12px;\n  height: 100%;\n  padding: 6px;\n  user-select: none;\n  width: 100%;\n\n  ${(props) => !props.disabled && activeStyle}\n`;\n","import { css } from 'styled-components';\n\nexport const Label = css<{ disabled?: boolean }>`\n  color: ${(props) => (props.disabled ? 'gray' : 'black')};\n  font-size: 14px;\n  font-family: sans-serif;\n  margin: 0;\n`;\n","import { css } from 'styled-components';\n\nimport { ControlWrapperProps } from '../../../controls/ControlWrapper';\nimport { Label } from './label';\n\nexport const CheckboxWrapper = css<ControlWrapperProps>``;\n\nconst checkedStyle = css`\n  &:before {\n    content: '✔';\n    font-size: 20px;\n    line-height: 20px;\n    position: absolute;\n    text-align: center;\n    top: 1px;\n    width: 100%;\n  }\n`;\n\nconst hoverStyle = css`\n  &:hover {\n    filter: brightness(90%);\n  }\n`;\n\nconst activeStyle = css`\n  &:active {\n    background: lightgray;\n  }\n`;\n\nexport const Checkbox = css<{ checked: boolean; disabled?: boolean }>`\n  background: white;\n  border: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n  border-radius: 2px;\n  box-shadow: 1px 1px 0 0 gray;\n  box-sizing: border-box;\n  color: ${(props) => (props.disabled ? 'gray' : 'black')};\n  height: 20px;\n  position: relative;\n  width: 20px;\n  margin-bottom: 2px;\n  margin-right: 2px;\n\n  ${(props) => !props.disabled && activeStyle}\n  ${(props) => !props.disabled && hoverStyle}\n  ${(props) => props.checked && checkedStyle}\n`;\n\nexport const CheckboxLabel = Label;\n","import { css } from 'styled-components';\n\nimport { ComboBoxOptionsProps } from '../../../controls/ComboBox';\nimport { ControlWrapperProps } from '../../../controls/ControlWrapper';\nimport { Label } from './label';\n\nexport const ComboBoxWrapper = css<ControlWrapperProps>``;\n\nexport const ComboBoxLabel = Label;\n\nexport const ComboBoxControl = css`\n  display: flex;\n  position: relative;\n  height: 100%;\n  width: 100%;\n`;\n\nexport const ComboBoxInput = css<{ disabled?: boolean }>`\n  border-bottom-left-radius: 1px;\n  border-bottom: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n  border-left: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n  border-right: none;\n  border-top-left-radius: 1px;\n  border-top: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n  box-sizing: border-box;\n  box-sizing: border-box;\n  color: ${(props) => (props.disabled ? 'gray' : 'black')};\n  font-size: 12px;\n  height: 24px;\n  margin: 0;\n  outline: none;\n  position: relative;\n  user-select: ${(props) => (props.disabled ? 'none' : 'auto')};\n  width: 100%;\n`;\n\nexport const ComboBoxButton = css<{ disabled?: boolean }>`\n  background: white;\n  border-top: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n  border-right: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n  border-bottom: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n  border-left: none;\n  border-radius: 0;\n  box-sizing: border-box;\n  width: 24px;\n  padding: 0;\n  height: 24px;\n  position: relative;\n\n  &:before {\n    border-bottom: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n    content: '';\n    left: 2px;\n    pointer-events: none;\n    position: absolute;\n    top: 11px;\n    transform: rotate(45deg);\n    width: 8px;\n  }\n\n  &:after {\n    border-bottom: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n    content: '';\n    left: 8px;\n    pointer-events: none;\n    position: absolute;\n    top: 11px;\n    transform: rotate(-45deg);\n    width: 8px;\n  }\n`;\n\nexport const ComboBoxOptions = css<ComboBoxOptionsProps>`\n  background: white;\n  border: 1px solid black;\n  box-sizing: border-box;\n  display: ${(props) => `${props.open ? 'block' : 'none'}`};\n  left: ${(props) => `${props.left}`}px;\n  margin: 0;\n  padding: 0;\n  position: fixed;\n  top: ${(props) => `${props.top - 1}`}px;\n  width: ${(props) => `${props.width}`}px;\n`;\n\nexport const ComboBoxOption = css`\n  list-style: none;\n  font-family: sans-serif;\n  font-size: 12px;\n  padding: 4px;\n  cursor: pointer;\n  &:hover {\n    background: rgb(19, 71, 214);\n    color: white;\n  }\n`;\n","import { css } from 'styled-components';\n\nimport { ControlWrapperProps } from '../../../controls/ControlWrapper';\n\nconst columnStyle = css`\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst inlineStyle = css`\n  flex-direction: row;\n  gap: 16px;\n  align-items: center;\n`;\n\nexport const ControlWrapper = css<ControlWrapperProps>`\n  box-sizing: border-box;\n  display: flex;\n  width: 100%;\n  margin-bottom: 4px;\n  box-sizing: border-box;\n  ${({ inlineLabel }) => (inlineLabel ? inlineStyle : columnStyle)}\n`;\n","import { css } from 'styled-components';\n\nimport { DividerProps } from '../../../controls/Divider';\n\nconst verticalStyle = css`\n  background: black;\n  height: 100%;\n  width: 1px;\n  margin: 0 4px;\n`;\n\nconst horizontalStyle = css`\n  background: black;\n  height: 1px;\n  width: 100%;\n  margin: 4px 0;\n`;\n\nexport const Divider = css<DividerProps>`\n  ${({ vertical }) => (vertical ? verticalStyle : horizontalStyle)}\n`;\n","import { css } from 'styled-components';\n\nexport const Fieldset = css`\n  border-radius: 2px;\n  border: 1px solid black;\n  font-family: sans-serif;\n  padding: 8px;\n  margin-bottom: 4px;\n`;\n\nexport const FieldsetLegend = css`\n  box-sizing: border-box;\n  padding: 4px 8px;\n  position: relative;\n\n  &:before {\n    border-left: 1px solid black;\n    border-right: 1px solid black;\n    border-bottom: 1px solid black;\n    bottom: 0;\n    box-sizing: border-box;\n    content: '';\n    height: 50%;\n    left: 0;\n    position: absolute;\n    width: 100%;\n  }\n`;\n","import { css } from 'styled-components';\n\nimport { ControlWrapperProps } from '../../../controls/ControlWrapper';\nimport { ListBoxOptionsProps } from '../../../controls/ListBox';\nimport { Label } from './label';\n\nexport const ListBoxWrapper = css<ControlWrapperProps>``;\n\nexport const ListBoxLabel = Label;\n\nexport const ListBoxButton = css<{ disabled?: boolean }>`\n  background: white;\n  border-radius: 0;\n  border: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n  box-sizing: border-box;\n  display: flex;\n  height: 24px;\n  padding: 3px;\n  font-size: 12px;\n  position: relative;\n  position: relative;\n  width: 100%;\n\n  &:before {\n    border-bottom: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n    content: '';\n    right: 10px;\n    pointer-events: none;\n    position: absolute;\n    top: 11px;\n    transform: rotate(45deg);\n    width: 8px;\n  }\n\n  &:after {\n    border-bottom: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n    content: '';\n    right: 4px;\n    pointer-events: none;\n    position: absolute;\n    top: 11px;\n    transform: rotate(-45deg);\n    width: 8px;\n  }\n`;\n\nexport const ListBoxOptions = css<ListBoxOptionsProps>`\n  background: white;\n  border: 1px solid black;\n  box-sizing: border-box;\n  display: ${(props) => `${props.open ? 'block' : 'none'}`};\n  left: ${(props) => `${props.left}`}px;\n  margin: 0;\n  padding: 0;\n  position: fixed;\n  top: ${(props) => `${props.top - 1}`}px;\n  width: ${(props) => `${props.width}`}px;\n`;\n\nexport const ListBoxOption = css`\n  list-style: none;\n  font-family: sans-serif;\n  font-size: 12px;\n  padding: 4px;\n  cursor: pointer;\n  &:hover {\n    background: rgb(19, 71, 214);\n    color: white;\n  }\n`;\n","import { css } from 'styled-components';\n\nimport menuBarThrobberIcon from './menuBarThrobberIcon.png';\n\nexport const MenuBar = css`\n  background: white;\n  border: 1px solid gray;\n  box-shadow: -1px -1px 0 lightgray;\n  box-sizing: border-box;\n  display: flex;\n  font-size: 14px;\n  font-family: sans-serif;\n  height: 28px;\n  margin-top: -2px;\n  margin-bottom: 2px;\n  padding: 0;\n  text-align: left;\n  user-select: none;\n  white-space: nowrap;\n  width: 100%;\n`;\n\nexport const MenuBarThrobber = css<{ isAnimated: boolean }>`\n  align-self: end;\n  background-color: black;\n  background-image: url('${menuBarThrobberIcon}');\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: 16px 16px;\n  height: 100%;\n  margin-left: auto;\n  width: 40px;\n\n  ${({ isAnimated }) => isAnimated && animatedMenuThrobber}\n\n  @keyframes menu-bar-throbber-animation {\n    0% {\n      background-size: 16px 16px;\n    }\n    100% {\n      background-size: 18px 18px;\n    }\n  }\n`;\n\nconst animatedMenuThrobber = css`\n  animation-name: menu-bar-throbber-animation;\n  animation-duration: 0.5s;\n  animation-iteration-count: infinite;\n  animation-direction: alternate;\n`;\n","import { css } from 'styled-components';\n\nimport { ScrollableContentViewProps } from '../../../controls/ScrollableContent';\n\nexport const ScrollableContentWrapper = css`\n  height: 100%;\n  width: 100%;\n  position: relative;\n`;\n\nexport const ScrollableContentView = css<ScrollableContentViewProps>`\n  box-sizing: border-box;\n  height: calc(100% - ${({ horizontal }) => (horizontal ? 22 : 0)}px);\n  width: calc(100% - ${({ vertical }) => (vertical ? 22 : 0)}px);\n  overscroll-behavior: none;\n  overflow-x: ${({ horizontal }) => (horizontal ? 'scroll' : 'clip')};\n  overflow-y: ${({ vertical }) => (vertical ? 'scroll' : 'clip')};\n  scrollbar-width: none;\n`;\n","import { css } from 'styled-components';\n\nexport const ScrollLeftButton = css`\n  height: 22px;\n  width: 22px;\n  flex-shrink: 0;\n  border-radius: 2px;\n  border: 1px solid black;\n  background: #fff;\n  position: relative;\n  box-sizing: border-box;\n\n  &:hover {\n    background: #dedede;\n  }\n\n  &:before {\n    border-bottom: 1px solid black;\n    content: '';\n    left: 5px;\n    pointer-events: none;\n    position: absolute;\n    top: 13px;\n    transform: rotate(45deg);\n    width: 8px;\n  }\n\n  &:after {\n    border-bottom: 1px solid black;\n    content: '';\n    left: 5px;\n    pointer-events: none;\n    position: absolute;\n    top: 7px;\n    transform: rotate(-45deg);\n    width: 8px;\n  }\n`;\n\nexport const ScrollRightButton = css`\n  height: 22px;\n  width: 22px;\n  flex-shrink: 0;\n  border-radius: 2px;\n  border: 1px solid black;\n  background: #fff;\n  position: relative;\n  box-sizing: border-box;\n\n  &:hover {\n    background: #dedede;\n  }\n\n  &:before {\n    border-bottom: 1px solid black;\n    content: '';\n    left: 6px;\n    pointer-events: none;\n    position: absolute;\n    top: 7px;\n    transform: rotate(45deg);\n    width: 8px;\n  }\n\n  &:after {\n    border-bottom: 1px solid black;\n    content: '';\n    left: 6px;\n    pointer-events: none;\n    position: absolute;\n    top: 13px;\n    transform: rotate(-45deg);\n    width: 8px;\n  }\n`;\n\nexport const ScrollbarHorizontalTrack = css`\n  width: 100%;\n  position: relative;\n  background: #ccc;\n`;\n\nexport const ScrollbarHorizontalThumb = css`\n  height: 22px;\n  background: blue;\n  position: absolute;\n  border: 1px solid black;\n  background: #fff;\n  box-sizing: border-box;\n\n  &:hover {\n    background: #dedede;\n  }\n`;\n\nexport const ScrollbarHorizontalWrapper = css`\n  background: #dedede;\n  bottom: 0;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  height: 22px;\n  left: 0;\n  position: absolute;\n`;\n","import { css } from 'styled-components';\n\nexport const ScrollUpButton = css`\n  height: 22px;\n  width: 22px;\n  border-radius: 2px;\n  border: 1px solid black;\n  flex-shrink: 0;\n  background: #fff;\n  position: relative;\n  box-sizing: border-box;\n\n  &:hover {\n    background: #dedede;\n  }\n\n  &:before {\n    border-bottom: 1px solid black;\n    content: '';\n    left: 9px;\n    pointer-events: none;\n    position: absolute;\n    top: 10px;\n    transform: rotate(45deg);\n    width: 8px;\n  }\n\n  &:after {\n    border-bottom: 1px solid black;\n    content: '';\n    left: 3px;\n    pointer-events: none;\n    position: absolute;\n    top: 10px;\n    transform: rotate(-45deg);\n    width: 8px;\n  }\n`;\n\nexport const ScrollDownButton = css`\n  height: 22px;\n  width: 22px;\n  border-radius: 2px;\n  border: 1px solid black;\n  flex-shrink: 0;\n  background: #fff;\n  position: relative;\n  box-sizing: border-box;\n\n  &:hover {\n    background: #dedede;\n  }\n\n  &:before {\n    border-bottom: 1px solid black;\n    content: '';\n    left: 3px;\n    pointer-events: none;\n    position: absolute;\n    top: 10px;\n    transform: rotate(45deg);\n    width: 8px;\n  }\n\n  &:after {\n    border-bottom: 1px solid black;\n    content: '';\n    left: 9px;\n    pointer-events: none;\n    position: absolute;\n    top: 10px;\n    transform: rotate(-45deg);\n    width: 8px;\n  }\n`;\n\nexport const ScrollbarVerticalTrack = css`\n  height: 100%;\n  position: relative;\n  background: #ccc;\n`;\n\nexport const ScrollbarVerticalThumb = css`\n  background: blue;\n  width: 22px;\n  position: absolute;\n  border: 1px solid black;\n  background: #fff;\n  box-sizing: border-box;\n\n  &:hover {\n    background: #dedede;\n  }\n`;\n\nexport const ScrollbarVerticalWrapper = css`\n  background: #dedede;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  right: 0;\n  top: 0;\n  width: 22px;\n`;\n","import { css } from 'styled-components';\n\nexport const StatusBar = css`\n  border-top: 1px solid grey;\n  bottom: 0;\n  box-sizing: border-box;\n  display: flex;\n  font-size: 14px;\n  gap: 3px;\n  height: 26px;\n  margin: -3px;\n  padding: 2px;\n  position: absolute;\n  width: calc(100% + 6px);\n`;\n\nexport const ResizeHandle = css`\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  content: ' ';\n  width: 12px;\n  height: 12px;\n  padding: 0;\n  margin: 0;\n  cursor: se-resize;\n\n  &:before {\n    content: '';\n    display: block;\n    width: 0;\n    height: 0;\n    position: absolute;\n    top: -10px;\n    left: 0px;\n    border-left: 10px solid transparent;\n    border-bottom: 10px solid grey;\n    border-top: 10px solid transparent;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport const StatusBarSection = css`\n  border: 1px solid black;\n  flex-grow: 1;\n  font-family: sans-serif;\n  padding: 2px;\n`;\n","import { css } from 'styled-components';\n\nimport { ControlWrapperProps } from '../../../controls/ControlWrapper';\nimport { Label } from './label';\n\nexport const TextareaWrapper = css<ControlWrapperProps>``;\n\nexport const TextareaLabel = Label;\n\nexport const TextareaElement = css<{ disabled?: boolean }>`\n  border-radius: 1px;\n  border: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n  box-sizing: border-box;\n  color: ${(props) => (props.disabled ? 'gray' : 'black')};\n  font-size: 12px;\n  height: 24px;\n  outline: none;\n  width: 100%;\n`;\n","import { css } from 'styled-components';\n\nimport { ControlWrapperProps } from '../../../controls/ControlWrapper';\nimport { Label } from './label';\n\nexport const TextInputWrapper = css<ControlWrapperProps>``;\n\nexport const TextInputLabel = Label;\n\nexport const TextInputElement = css<{ disabled?: boolean }>`\n  border-radius: 1px;\n  border: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n  box-sizing: border-box;\n  color: ${(props) => (props.disabled ? 'gray' : 'black')};\n  font-size: 12px;\n  height: 24px;\n  outline: none;\n  width: 100%;\n`;\n","import { css } from 'styled-components';\n\nimport { ControlWrapperProps } from '../../../controls/ControlWrapper';\nimport { Label } from './label';\n\nexport const TimeInputWrapper = css<ControlWrapperProps>``;\n\nexport const TimeInputLabel = Label;\n\nexport const TimeInputControl = css`\n  display: flex;\n  height: 24px;\n  gap: 2px;\n  width: 100%;\n`;\n\nexport const TimeInputField = css<{ disabled?: boolean }>`\n  border-radius: 1px;\n  border: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n  display: flex;\n  width: 100%;\n`;\n\nexport const TimeInputValue = css<{ disabled?: boolean }>`\n  border: none;\n  color: ${(props) => (props.disabled ? 'gray' : 'black')};\n  outline: none;\n  width: 18px;\n\n  &::selection {\n    color: white;\n    background: ${(props) => (props.disabled ? 'gray' : 'rgb(19, 71, 214)')};\n  }\n`;\n\nexport const TimeInputSeparator = css`\n  width: 6px;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  &:before {\n    content: ':';\n    position: absolute;\n  }\n`;\n\nexport const TimeInputButtons = css`\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n`;\n\nconst activeStyleProperties = css`\n  background: rgb(200, 200, 200);\n  box-shadow: none;\n  left: 1px;\n  top: 1px;\n`;\nconst activeStyle = css<{ active?: boolean }>`\n  ${({ active }) => active && activeStyleProperties}\n  &:active {\n    ${activeStyleProperties}\n  }\n`;\n\nexport const TimeInputIncreaseButton = css<{\n  active?: boolean;\n  disabled?: boolean;\n}>`\n  background: white;\n  border-radius: 0;\n  border: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n  box-shadow: 1px 1px 0 0 gray;\n  box-sizing: border-box;\n  height: 11px;\n  position: relative;\n  width: 18px;\n\n  ${(props) => !props.disabled && activeStyle}\n\n  &:before {\n    border-bottom: 1px solid black;\n    content: '';\n    left: 7px;\n    pointer-events: none;\n    position: absolute;\n    top: 4px;\n    transform: rotate(45deg);\n    width: 6px;\n  }\n\n  &:after {\n    border-bottom: 1px solid black;\n    content: '';\n    left: 3px;\n    pointer-events: none;\n    position: absolute;\n    top: 4px;\n    transform: rotate(-45deg);\n    width: 6px;\n  }\n`;\n\nexport const TimeInputDecreaseButton = css<{\n  active?: boolean;\n  disabled?: boolean;\n}>`\n  background: white;\n  border-radius: 0;\n  border: 1px solid ${(props) => (props.disabled ? 'gray' : 'black')};\n  box-shadow: 1px 1px 0 0 gray;\n  box-sizing: border-box;\n  height: 11px;\n  position: relative;\n  width: 18px;\n\n  ${(props) => !props.disabled && activeStyle}\n\n  &:before {\n    border-bottom: 1px solid black;\n    content: '';\n    left: 7px;\n    pointer-events: none;\n    position: absolute;\n    top: 4px;\n    transform: rotate(-45deg);\n    width: 6px;\n  }\n\n  &:after {\n    border-bottom: 1px solid black;\n    content: '';\n    left: 3px;\n    pointer-events: none;\n    position: absolute;\n    top: 4px;\n    transform: rotate(45deg);\n    width: 6px;\n  }\n`;\n","import { css } from 'styled-components';\n\nexport const Toolbar = css`\n  background: white;\n  border: 1px solid gray;\n  box-shadow: -1px -1px 0 lightgray;\n  box-sizing: border-box;\n  display: flex;\n  height: 28px;\n  margin-top: -2px;\n  margin-bottom: 2px;\n  padding: 0;\n  text-align: left;\n  white-space: nowrap;\n  width: 100%;\n`;\n","import { css } from 'styled-components';\n\nexport const ToolbarButtonWrapper = css``;\n\nconst hoverStyle = css`\n  &:hover {\n    border: 1px solid gray;\n  }\n`;\n\nconst activeStyle = css`\n  &:active {\n    background: lightgray;\n    box-shadow: 1px 1px 0 lightgray inset;\n    position: relative;\n  }\n`;\n\nexport const ToolbarButton = css<{ disabled?: boolean }>`\n  justify-content: center;\n  background: white;\n  border-radius: 1px;\n  border: 1px solid transparent;\n  box-sizing: border-box;\n  display: inline-flex;\n  font-size: 12px;\n  flex-direction: column;\n  height: 100%;\n  flex-grow: 1;\n  user-select: none;\n\n  ${(props) => !props.disabled && hoverStyle}\n  ${(props) => !props.disabled && activeStyle}\n`;\n\nexport const ToolbarButtonLabel = css``;\n\nexport const ToolbarButtonIcon = css`\n  display: block;\n  height: 16px;\n  width: 16px;\n`;\n","import { css } from 'styled-components';\n\nexport const Well = css`\n  border-radius: 2px;\n  border: 1px solid black;\n  font-family: sans-serif;\n  padding: 8px;\n`;\n","import { ControlsThemeSection } from '../../types';\nimport * as addressBar from './addressBar';\nimport * as alertButton from './alertButton';\nimport * as alertText from './alertText';\nimport * as button from './button';\nimport * as checkbox from './checkbox';\nimport * as comboBox from './comboBox';\nimport * as controlWrapper from './controlWrapper';\nimport * as divider from './divider';\nimport * as fieldset from './fieldset';\nimport * as label from './label';\nimport * as listBox from './listBox';\nimport * as menuBar from './menuBar';\nimport * as scrollableContent from './scrollableContent';\nimport * as scrollbarHorizontal from './scrollbarHorizontal';\nimport * as scrollbarVertical from './scrollbarVertical';\nimport * as statusBar from './statusBar';\nimport * as statusBarSection from './statusBarSection';\nimport * as textarea from './textarea';\nimport * as textInput from './textInput';\nimport * as timeInput from './timeInput';\nimport * as toolbar from './toolbar';\nimport * as toolbarButton from './toolbarButton';\nimport * as well from './well';\n\nconst controls: ControlsThemeSection = {\n  ...addressBar,\n  ...alertButton,\n  ...alertText,\n  ...button,\n  ...checkbox,\n  ...comboBox,\n  ...controlWrapper,\n  ...divider,\n  ...fieldset,\n  ...label,\n  ...listBox,\n  ...menuBar,\n  ...scrollableContent,\n  ...scrollbarHorizontal,\n  ...scrollbarVertical,\n  ...statusBar,\n  ...statusBarSection,\n  ...textarea,\n  ...textInput,\n  ...timeInput,\n  ...toolbar,\n  ...toolbarButton,\n  ...well,\n};\n\nexport default controls;\n","import { css } from 'styled-components';\n\nexport const Taskbar = css`\n  background: white;\n  border-top: 1px solid black;\n  bottom: 0;\n  box-sizing: border-box;\n  display: inline-block;\n  font-size: 16px;\n  height: 28px;\n  left: 0;\n  overflow-x: visible;\n  padding: 2px;\n  position: absolute;\n  text-align: left;\n  white-space: nowrap;\n  width: 100%;\n`;\n","import { css } from 'styled-components';\n\nimport { TaskbarButtonProps } from '../../../../elements/Taskbar/TaskbarButton';\n\nconst taskbarButtonActiveStyle = css`\n  background: none;\n  border-color: lightgray;\n  box-shadow: inset 1px 1px 0 gray;\n  font-weight: bold;\n`;\n\nexport const TaskbarButton = css<TaskbarButtonProps>`\n  align-items: center;\n  border-radius: 3px;\n  border: 1px solid gray;\n  box-shadow: 1px 1px 0 lightgray;\n  display: inline-flex;\n  flex-grow: 1;\n  font-size: 12px;\n  height: 22px;\n  margin-left: 2px;\n  text-align: left;\n  user-select: none;\n  width: 160px;\n  ${(props) => props.active && taskbarButtonActiveStyle};\n`;\n\nexport const TaskbarButtonTitle = css``;\n\nexport const TaskbarButtonIcon = css`\n  display: block;\n  height: 16px;\n  width: 16px;\n  margin-right: 4px;\n`;\n","import { css } from 'styled-components';\n\nexport const VersionInfo = css`\n  bottom: 30px;\n  color: white;\n  font-family: sans-serif;\n  font-size: 14px;\n  margin: 4px;\n  pointer-events: none;\n  position: absolute;\n  right: 0;\n  text-align: right;\n  user-select: none;\n  z-index: 1000;\n`;\n","import { ElementsThemeSection } from '../../types';\nimport * as desktop from './desktop';\nimport * as taskbar from './taskbar/taskbar';\nimport * as taskbarButton from './taskbar/taskbarButton';\nimport * as versionInfo from './versionInfo';\n\nconst elements: ElementsThemeSection = {\n  ...taskbar,\n  ...taskbarButton,\n  ...desktop,\n  ...versionInfo,\n};\n\nexport default elements;\n","import { css } from 'styled-components';\n\nconst size = 5;\nconst offset = -5;\n\nconst sharedStyle = css`\n  box-sizing: border-box;\n  position: absolute;\n`;\n\nexport const NResize = css`\n  ${sharedStyle};\n  top: ${offset}px;\n  left: ${offset}px;\n  right: ${offset}px;\n  height: ${size}px;\n  cursor: n-resize;\n`;\n\nexport const NEResize = css`\n  ${sharedStyle};\n  top: ${offset}px;\n  right: ${offset}px;\n  height: ${size * 2}px;\n  width: ${size * 2}px;\n  cursor: ne-resize;\n`;\n\nexport const EResize = css`\n  ${sharedStyle};\n  top: ${offset}px;\n  bottom: ${offset}px;\n  right: ${offset}px;\n  width: ${size}px;\n  cursor: e-resize;\n`;\n\nexport const SEResize = css`\n  ${sharedStyle};\n  bottom: ${offset}px;\n  right: ${offset}px;\n  height: ${size * 2}px;\n  width: ${size * 2}px;\n  cursor: se-resize;\n`;\n\nexport const SResize = css`\n  ${sharedStyle};\n  bottom: ${offset}px;\n  left: ${offset}px;\n  right: ${offset}px;\n  height: ${size}px;\n  cursor: s-resize;\n`;\n\nexport const SWResize = css`\n  ${sharedStyle};\n  bottom: ${offset}px;\n  left: ${offset}px;\n  height: ${size * 2}px;\n  width: ${size * 2}px;\n  cursor: sw-resize;\n`;\n\nexport const WResize = css`\n  ${sharedStyle};\n  top: ${offset}px;\n  bottom: ${offset}px;\n  left: ${offset}px;\n  width: ${size}px;\n  cursor: w-resize;\n`;\n\nexport const NWResize = css`\n  ${sharedStyle};\n  top: ${offset}px;\n  left: ${offset}px;\n  height: ${size * 2}px;\n  width: ${size * 2}px;\n  cursor: nw-resize;\n`;\n","import { css } from 'styled-components';\n\nimport { TitleBarProps } from '../../../../window/components/TitleBar';\n\nexport const TitleBar = css<TitleBarProps>`\n  background: ${(props) => (props.isActive ? 'rgb(19, 71, 214)' : 'grey')};\n  border-radius: 3px;\n  box-sizing: border-box;\n  color: white;\n  display: flex;\n  flex-shrink: 0;\n  font-family: sans-serif;\n  font-size: 12px;\n  height: 24px;\n  margin: 0 0 4px;\n  padding-left: 4px;\n  text-align: left;\n  user-select: none;\n  width: 100%;\n`;\n\nexport const TitleBarTitleContainer = css`\n  display: flex;\n  align-items: center;\n  flex-grow: 1;\n`;\n\nexport const TitleBarTitle = css`\n  position: relative;\n  top: 1px;\n`;\n\nexport const TitleBarIcon = css`\n  display: block;\n  height: 16px;\n  width: 16px;\n  margin-right: 4px;\n`;\n","import { css } from 'styled-components';\n\nexport const TitleBarButtons = css`\n  box-sizing: border-box;\n  display: flex;\n  position: absolute;\n  right: 0;\n  top: 0;\n  margin: 0;\n`;\n\nexport const WindowButton = css`\n  background: white;\n  border-radius: 2px;\n  border: none;\n  box-sizing: border-box;\n  height: 20px;\n  margin: 2px 2px;\n  padding: 0;\n  position: relative;\n  width: 20px;\n\n  &:hover {\n    filter: brightness(90%);\n  }\n\n  &:active {\n    background: lightgray;\n  }\n`;\n\nexport const MinimizeButton = css`\n  &:before {\n    border-bottom: 1px solid black;\n    content: '';\n    height: 10px;\n    left: 5px;\n    pointer-events: none;\n    position: absolute;\n    top: 4px;\n    width: 10px;\n  }\n`;\n\nexport const MaximizeButton = css`\n  &:before {\n    border: 1px solid black;\n    content: '';\n    height: 10px;\n    left: 4px;\n    pointer-events: none;\n    position: absolute;\n    top: 4px;\n    width: 10px;\n  }\n`;\n\nexport const UnmaximizeButton = css`\n  &:before {\n    border-right: 1px solid black;\n    border-top: 1px solid black;\n    content: '';\n    height: 8px;\n    pointer-events: none;\n    position: absolute;\n    right: 4px;\n    top: 4px;\n    width: 8px;\n  }\n\n  &:after {\n    border: 1px solid black;\n    bottom: 4px;\n    content: '';\n    height: 8px;\n    left: 4px;\n    pointer-events: none;\n    position: absolute;\n    width: 8px;\n  }\n`;\n\nexport const CloseButton = css`\n  &:before {\n    border-bottom: 1px solid black;\n    content: '';\n    left: 2px;\n    pointer-events: none;\n    position: absolute;\n    top: 10px;\n    transform: rotate(45deg);\n    width: 16px;\n  }\n\n  &:after {\n    border-bottom: 1px solid black;\n    content: '';\n    left: 2px;\n    pointer-events: none;\n    position: absolute;\n    top: 10px;\n    transform: rotate(-45deg);\n    width: 16px;\n  }\n`;\n","import { css } from 'styled-components';\n\nimport { WindowElementProps } from '../../../window/components/WindowElement';\nimport { ViewportWindowMargins } from '../../../windowManager/types';\n\nconst getHeight = (viewportWindowMargins: ViewportWindowMargins) =>\n  `calc(100% - ${viewportWindowMargins.top + viewportWindowMargins.bottom}px)`;\n\nconst getWidth = (viewportWindowMargins: ViewportWindowMargins) =>\n  `calc(100% - ${viewportWindowMargins.left + viewportWindowMargins.right}px)`;\n\nconst maximizedStyles = css<WindowElementProps>`\n  height: ${(props) => getHeight(props.viewportWindowMargins)} !important;\n  left: ${(props) => props.viewportWindowMargins.left} !important;\n  top: ${(props) => props.viewportWindowMargins.top} !important;\n  width: ${(props) => getWidth(props.viewportWindowMargins)} !important;\n  z-index: ${(props) => props.orderNumber} !important;\n  border-radius: 0;\n`;\n\nconst minimizedStyles = css`\n  display: none;\n`;\n\nexport const WindowElement = css<WindowElementProps>`\n  background: white;\n  border-radius: 3px;\n  box-sizing: border-box;\n  border: 3px solid white;\n  box-shadow: 0 0 0 1px gray;\n  color: black;\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  position: absolute;\n\n  ${(props) => props.isMaximized && maximizedStyles}\n  ${(props) => props.isMinimized && minimizedStyles}\n`;\n","import { css } from 'styled-components';\n\nexport const WindowContent = css`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  font-family: sans-serif;\n  font-size: 14px;\n  height: 100%;\n  margin: 0;\n  text-align: left;\n  user-select: none;\n  width: 100%;\n`;\n","import { DefaultTheme } from '../types';\nimport controls from './controls';\nimport elements from './elements';\nimport window from './window';\n\nconst defaultTheme: DefaultTheme = {\n  id: 'DEFAULT',\n  name: 'Default Theme',\n  controls,\n  elements,\n  window,\n};\n\nexport default defaultTheme;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Direction } from '../../windowManager/types';\n\ninterface ResizeBorderProps {\n  resize: (event: React.MouseEvent, direction: Direction) => void;\n}\n\nconst NResize = styled.div`\n  ${(props) => props.theme.window.NResize}\n`;\n\nconst NEResize = styled.div`\n  ${(props) => props.theme.window.NEResize}\n`;\n\nconst EResize = styled.div`\n  ${(props) => props.theme.window.EResize}\n`;\n\nconst SEResize = styled.div`\n  ${(props) => props.theme.window.SEResize}\n`;\n\nconst SResize = styled.div`\n  ${(props) => props.theme.window.SResize}\n`;\n\nconst SWResize = styled.div`\n  ${(props) => props.theme.window.SWResize}\n`;\n\nconst WResize = styled.div`\n  ${(props) => props.theme.window.WResize}\n`;\n\nconst NWResize = styled.div`\n  ${(props) => props.theme.window.NWResize}\n`;\n\nconst ResizeBorder = ({ resize }: ResizeBorderProps) => (\n  <>\n    <NResize onMouseDown={(e) => resize(e, Direction.N)} />\n    <EResize onMouseDown={(e) => resize(e, Direction.E)} />\n    <SResize onMouseDown={(e) => resize(e, Direction.S)} />\n    <WResize onMouseDown={(e) => resize(e, Direction.W)} />\n    <NEResize onMouseDown={(e) => resize(e, Direction.NE)} />\n    <SEResize onMouseDown={(e) => resize(e, Direction.SE)} />\n    <SWResize onMouseDown={(e) => resize(e, Direction.SW)} />\n    <NWResize onMouseDown={(e) => resize(e, Direction.NW)} />\n  </>\n);\n\nexport default ResizeBorder;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface TitleBarButtonsProps {\n  close(): void;\n\n  isClosable: boolean;\n  isMaximizable: boolean;\n  isMaximized: boolean;\n  isMinimizable: boolean;\n\n  maximize(): void;\n\n  minimize(): void;\n\n  unmaximize(): void;\n}\n\nconst TitleBarButtonsElement = styled.div`\n  ${(props) => props.theme.window.TitleBarButtons}\n`;\n\nconst WindowButton = styled.button`\n  ${(props) => props.theme.window.WindowButton}\n`;\nWindowButton.defaultProps = {\n  type: 'button',\n};\n\nconst MinimizeButton = styled(WindowButton)`\n  ${(props) => props.theme.window.MinimizeButton}\n`;\n\nconst MaximizeButton = styled(WindowButton)`\n  ${(props) => props.theme.window.MaximizeButton}\n`;\n\nconst UnmaximizeButton = styled(WindowButton)`\n  ${(props) => props.theme.window.UnmaximizeButton}\n`;\n\nconst CloseButton = styled(WindowButton)`\n  ${(props) => props.theme.window.CloseButton}\n`;\n\nconst TitleBarButtons = ({\n  close,\n  isClosable,\n  isMaximizable,\n  isMaximized,\n  isMinimizable,\n  maximize,\n  minimize,\n  unmaximize,\n}: TitleBarButtonsProps): JSX.Element => (\n  <TitleBarButtonsElement>\n    {isMinimizable && <MinimizeButton onClick={minimize} />}\n    {isMaximizable &&\n      (isMaximized ? (\n        <UnmaximizeButton onClick={unmaximize} />\n      ) : (\n        <MaximizeButton onClick={maximize} />\n      ))}\n    {isClosable && <CloseButton onClick={close} />}\n  </TitleBarButtonsElement>\n);\nexport default TitleBarButtons;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport type { Icon } from '../../icons/types';\nimport { getIconFileForSize } from '../../icons/utils';\nimport TitleBarButtons from './TitleBarButtons';\n\nexport interface TitleBarProps {\n  isActive: boolean;\n}\n\ninterface Props extends TitleBarProps {\n  close(): void;\n\n  drag(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\n\n  icon: Icon;\n  isClosable: boolean;\n  isMaximizable: boolean;\n  isMaximized: boolean;\n  isMinimizable: boolean;\n\n  maximize(): void;\n\n  minimize(): void;\n\n  title: string;\n\n  unmaximize(): void;\n}\n\nconst TitleBarElement = styled.div<TitleBarProps>`\n  ${(props) => props.theme.window.TitleBar}\n`;\n\nconst TitleContainer = styled.div`\n  ${(props) => props.theme.window.TitleBarTitleContainer}\n`;\n\nconst TitleBarTitle = styled.div`\n  ${(props) => props.theme.window.TitleBarTitle}\n`;\n\nconst TitleBarIconElement = styled.img`\n  ${(props) => props.theme.window.TitleBarIcon}\n`;\n\nconst TitleBarIcon = ({ icon }: { icon: Icon }) => {\n  if (!icon) {\n    return null;\n  }\n\n  const iconFile = getIconFileForSize(icon);\n  return <TitleBarIconElement src={iconFile} alt=\"Window icon\" />;\n};\n\nconst TitleBar = ({\n  close,\n  drag,\n  icon,\n  isActive,\n  isMaximizable,\n  isMaximized,\n  isMinimizable,\n  isClosable,\n  maximize,\n  minimize,\n  title,\n  unmaximize,\n}: Props) => {\n  const onTitleDoubleClick = () => {\n    isMaximized ? unmaximize() : maximize();\n  };\n\n  return (\n    <TitleBarElement isActive={isActive}>\n      <TitleContainer onMouseDown={drag} onDoubleClick={onTitleDoubleClick}>\n        <TitleBarIcon icon={icon} />\n        <TitleBarTitle>{title}</TitleBarTitle>\n      </TitleContainer>\n      <TitleBarButtons\n        close={close}\n        isClosable={isClosable}\n        isMaximizable={isMaximizable}\n        isMaximized={isMaximized}\n        isMinimizable={isMinimizable}\n        maximize={maximize}\n        minimize={minimize}\n        unmaximize={unmaximize}\n      />\n    </TitleBarElement>\n  );\n};\n\nexport default TitleBar;\n","import styled from 'styled-components';\n\nconst WindowContent = styled.div`\n  ${(props) => props.theme.window.WindowContent}\n`;\nexport default WindowContent;\n","import styled from 'styled-components';\n\nimport { ViewportWindowMargins } from '../../windowManager/types';\n\nexport interface WindowElementProps {\n  height: number;\n  width: number;\n  positionX: number;\n  positionY: number;\n  isMinimized: boolean;\n  isMaximized: boolean;\n  orderNumber: number;\n  viewportWindowMargins: ViewportWindowMargins;\n}\n\nconst WindowElement = styled.div.attrs((props: WindowElementProps) => ({\n  style: {\n    top: `${props.positionY}px`,\n    width: `${props.width}px`,\n    height: `${props.height}px`,\n    left: `${props.positionX}px`,\n    zIndex: props.orderNumber,\n  },\n}))<WindowElementProps>`\n  ${(props) => props.theme.window.WindowElement}\n`;\nexport default WindowElement;\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"window-MessageBox-stories.3961fb51.iframe.bundle.js","mappings":";AAKA;AAGA;ACKA;AAQA;AACA;AASA;ACrBA;AAGA;ACRA;AAGA;ACIA;AAGA","sources":["webpack://@tatuarvela/wisp/./src/controls/AlertText.tsx","webpack://@tatuarvela/wisp/./src/controls/Button.tsx","webpack://@tatuarvela/wisp/./src/controls/AlertButton.tsx","webpack://@tatuarvela/wisp/./src/controls/AlertContent.tsx","webpack://@tatuarvela/wisp/./src/window/MessageBox.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const AlertTextThemeProperties = ['AlertText'] as const;\n\nexport const AlertText = styled.div`\n  ${(props) => props.theme.controls.AlertText}\n`;\n\nexport default AlertText;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const ButtonThemeProperties = [\n  'ButtonElement',\n  'ButtonWrapper',\n] as const;\n\nexport interface ButtonWrapperProps {\n  disabled?: boolean;\n}\n\nconst ButtonWrapper = styled.div<ButtonWrapperProps>`\n  ${(props) => props.theme.controls.ButtonWrapper}\n`;\n\nexport interface ButtonElementProps\n  extends React.ComponentPropsWithoutRef<'button'> {\n  disabled?: boolean;\n}\n\nconst ButtonElement = styled.button`\n  ${(props) => props.theme.controls.ButtonElement}\n`;\n\nexport interface ButtonProps extends React.ComponentPropsWithoutRef<'button'> {\n  disabled?: boolean;\n  height?: number;\n  width?: number;\n}\n\nexport const Button = ({ width, height, disabled, ...rest }: ButtonProps) => (\n  <ButtonWrapper\n    disabled={disabled}\n    style={{ width: `${width}px`, height: `${height}px` }}\n  >\n    <ButtonElement disabled={disabled} {...rest} />\n  </ButtonWrapper>\n);\n\nexport default Button;\n","import React, { ComponentProps } from 'react';\nimport styled from 'styled-components';\n\nimport Button from '../controls/Button';\nimport { useWindow } from '../window';\nimport { useWindowManager } from '../windowManager/hooks';\n\nexport const AlertButtonThemeProperties = ['AlertButtonElement'] as const;\n\nconst AlertButtonElement = styled(Button)`\n  ${(props) => props.theme.controls.AlertButtonElement}\n`;\n\nconst AlertButton = (props: ComponentProps<typeof AlertButtonElement>) => {\n  const { id } = useWindow();\n  const { closeWindow } = useWindowManager();\n  const defaultOnClick = () => closeWindow(id);\n  const onClick = props.onClick ?? defaultOnClick;\n  return <AlertButtonElement {...props} onClick={onClick} />;\n};\n\nexport default AlertButton;\n","import styled from 'styled-components';\n\nexport const AlertContentThemeProperties = ['AlertContent'] as const;\n\nexport const AlertContent = styled.div`\n  ${(props) => props.theme.controls.AlertContent}\n`;\n\nexport default AlertContent;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport AlertButton from '../controls/AlertButton';\nimport AlertContent from '../controls/AlertContent';\nimport AlertText from '../controls/AlertText';\nimport { Icon } from '../icons';\nimport { getIconFileForSize } from '../icons/utils';\nimport { useThemeManager } from '../themeManager/hooks';\nimport Window, { WindowProps } from './Window';\n\nconst AlertIconElement = styled.img`\n  ${(props) => props.theme.controls.AlertIcon}\n`;\n\nconst AlertIcon = ({ icon }: { icon: string | Icon }) => {\n  const { theme } = useThemeManager();\n\n  const resolvedIcon = typeof icon === 'string' ? theme.icons[icon] : icon;\n  if (!resolvedIcon) {\n    return null;\n  }\n\n  const iconFile = getIconFileForSize(resolvedIcon);\n  return <AlertIconElement src={iconFile} alt=\"Alert icon\" />;\n};\n\nexport type MessageBoxProps = WindowProps & {\n  alertIcon?: string | Icon;\n  buttonText?: string;\n  onButtonClick?(): void;\n};\n\nexport const MessageBox = ({\n  alertIcon = 'warning',\n  buttonText = 'OK',\n  onButtonClick,\n  ...windowProps\n}: MessageBoxProps) => (\n  <Window\n    {...windowProps}\n    id={windowProps.id}\n    title={windowProps.title}\n    alwaysShowCloseButton={windowProps.alwaysShowCloseButton ?? true}\n    isClosable={windowProps.isClosable ?? false}\n    isMaximizable={windowProps.isMaximizable ?? false}\n    isMinimizable={windowProps.isMinimizable ?? false}\n    isResizable={windowProps.isResizable ?? false}\n  >\n    <AlertContent>\n      <AlertIcon icon={alertIcon} />\n      <AlertText>{windowProps.children}</AlertText>\n    </AlertContent>\n    <AlertButton onClick={onButtonClick} type=\"button\">\n      {buttonText}\n    </AlertButton>\n  </Window>\n);\n\nexport default MessageBox;\n"],"names":[],"sourceRoot":""}
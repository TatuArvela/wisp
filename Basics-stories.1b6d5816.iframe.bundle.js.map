{"version":3,"file":"Basics-stories.1b6d5816.iframe.bundle.js","mappings":";AAKA;AAGA;ACIA;AASA;AACA;AAGA;AClBA;AAGA;ACLA;AAGA;ACMA;AAGA","sources":["webpack://@tatuarvela/wisp/./src/controls/AlertText.tsx","webpack://@tatuarvela/wisp/./src/controls/Button.tsx","webpack://@tatuarvela/wisp/./src/controls/AlertButton.tsx","webpack://@tatuarvela/wisp/./src/controls/AlertContent.tsx","webpack://@tatuarvela/wisp/./src/window/AlertWindow.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const AlertTextThemeProperties = ['AlertText'] as const;\n\nexport const AlertText = styled.div`\n  ${(props) => props.theme.controls.AlertText}\n`;\n\nexport default AlertText;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const ButtonThemeProperties = ['Button', 'ButtonWrapper'] as const;\n\nexport interface ButtonWrapperProps {\n  disabled?: boolean;\n  height?: number;\n  width?: number;\n}\n\nconst ButtonWrapper = styled.div<ButtonWrapperProps>`\n  ${(props) => props.theme.controls.ButtonWrapper}\n`;\n\nexport interface ButtonProps extends React.ComponentPropsWithoutRef<'button'> {\n  disabled?: boolean;\n  height?: number;\n  width?: number;\n}\n\nconst ButtonElement = styled.button`\n  ${(props) => props.theme.controls.Button}\n`;\n\nexport const Button = ({ width, height, disabled, ...rest }: ButtonProps) => (\n  <ButtonWrapper\n    disabled={disabled}\n    style={{ width: `${width}px`, height: `${height}px` }}\n  >\n    <ButtonElement disabled={disabled} {...rest} />\n  </ButtonWrapper>\n);\n\nexport default Button;\n","import styled from 'styled-components';\n\nimport Button from '../controls/Button';\n\nexport const AlertButtonThemeProperties = ['AlertButton'] as const;\n\nexport const AlertButton = styled(Button)`\n  ${(props) => props.theme.controls.AlertButton}\n`;\n\nexport default AlertButton;\n","import styled from 'styled-components';\n\nexport const AlertContentThemeProperties = ['AlertContent'] as const;\n\nexport const AlertContent = styled.div`\n  ${(props) => props.theme.controls.AlertContent}\n`;\n\nexport default AlertContent;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport AlertButton from '../controls/AlertButton';\nimport AlertContent from '../controls/AlertContent';\nimport AlertText from '../controls/AlertText';\nimport icons, { IconKey } from '../icons';\nimport { Icon } from '../icons/types';\nimport { getIconFileForSize } from '../icons/utils';\nimport Window, { WindowProps } from './Window';\n\ntype AlertIconType = null | IconKey | Icon;\n\nconst AlertIconElement = styled.img`\n  ${(props) => props.theme.controls.AlertIcon}\n`;\n\nconst AlertIcon = ({ icon }: { icon: AlertIconType }) => {\n  if (!icon) {\n    return null;\n  }\n\n  let resolvedIcon;\n  if (typeof icon === 'string') {\n    resolvedIcon = icons[icon] ?? null;\n  } else {\n    resolvedIcon = icon;\n  }\n\n  if (!resolvedIcon) {\n    return null;\n  }\n\n  const iconFile = getIconFileForSize(resolvedIcon);\n  return <AlertIconElement src={iconFile} alt=\"Alert icon\" />;\n};\n\nexport type AlertWindowProps = WindowProps & {\n  alertIcon?: AlertIconType;\n  buttonText?: string;\n  onButtonClick?(): void;\n};\n\nexport const AlertWindow = ({\n  alertIcon = 'warning',\n  buttonText = 'OK',\n  children,\n  id,\n  onButtonClick,\n  title,\n  ...windowProps\n}: AlertWindowProps) => (\n  <Window\n    {...windowProps}\n    id={id}\n    title={title}\n    isMaximizable={false}\n    isMinimizable={false}\n    isResizable={false}\n  >\n    <AlertContent>\n      <AlertIcon icon={alertIcon} />\n      <AlertText>{children}</AlertText>\n    </AlertContent>\n    <AlertButton onClick={onButtonClick} type=\"button\">\n      {buttonText}\n    </AlertButton>\n  </Window>\n);\n\nexport default AlertWindow;\n"],"names":[],"sourceRoot":""}
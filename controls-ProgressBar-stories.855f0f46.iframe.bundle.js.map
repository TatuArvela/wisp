{"version":3,"file":"controls-ProgressBar-stories.855f0f46.iframe.bundle.js","mappings":";AAgBA;AAGA;AACA;AAUA","sources":["webpack://@tatuarvela/wisp/./src/controls/ProgressBar.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport useResizeObserver from 'use-resize-observer';\n\nexport const ProgressBarThemeProperties = [\n  'ProgressBar',\n  'ProgressBarFill',\n] as const;\n\nexport interface ProgressBarFillProps {\n  disabled: boolean;\n  isIndeterminate: boolean;\n  variant: 'steps' | 'block';\n}\n\nconst ProgressBarFill = styled.div<ProgressBarFillProps>`\n  ${(props) => props.theme.controls.ProgressBarFill}\n`;\n\nconst ProgressBarElement = styled.div<{ disabled: boolean }>`\n  ${(props) => props.theme.controls.ProgressBar}\n`;\n\nexport interface ProgressBarProps {\n  disabled?: boolean;\n  max?: number;\n  value?: number;\n  variant?: 'steps' | 'block';\n}\n\nconst getStepWidth = (current: HTMLDivElement) => {\n  if (!current) return undefined;\n  const stepWidthValue =\n    getComputedStyle(current).getPropertyValue('--step-width');\n  if (!stepWidthValue) return undefined;\n  return parseInt(stepWidthValue.replace('px', ''));\n};\n\nconst calculateWidth = ({\n  elementWidth,\n  max,\n  stepWidth = 1,\n  value,\n  variant,\n}: {\n  elementWidth: number;\n  max: number;\n  stepWidth: number | undefined;\n  value: number;\n  variant: 'steps' | 'block';\n}) => {\n  const ratio = value === undefined || max === undefined ? 0.5 : value / max;\n\n  if (variant === 'block') {\n    return `${ratio * 100}%`;\n  }\n\n  let calculatedWidth = elementWidth * ratio;\n  calculatedWidth = Math.floor(calculatedWidth / stepWidth) * stepWidth;\n  calculatedWidth = Math.min(calculatedWidth, elementWidth);\n  return `${calculatedWidth}px`;\n};\n\nexport const ProgressBar = ({\n  disabled = false,\n  max = 1,\n  value,\n  variant = 'block',\n}: ProgressBarProps) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const { width: elementWidth = 1 } = useResizeObserver<HTMLDivElement>({\n    ref,\n  });\n  const [width, setWidth] = useState<string | undefined>();\n  const isIndeterminate = value === undefined || max === undefined;\n\n  useEffect(() => {\n    setWidth(\n      calculateWidth({\n        elementWidth,\n        max,\n        stepWidth: getStepWidth(ref.current),\n        value,\n        variant,\n      })\n    );\n  }, [elementWidth, isIndeterminate, max, value, variant]);\n\n  return (\n    <ProgressBarElement disabled={disabled} ref={ref}>\n      <ProgressBarFill\n        disabled={disabled}\n        isIndeterminate={isIndeterminate}\n        variant={variant}\n        style={\n          {\n            '--width': width,\n          } as React.CSSProperties\n        }\n      />\n    </ProgressBarElement>\n  );\n};\n\nexport default ProgressBar;\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"controls-TimeInput-stories.61f34f84.iframe.bundle.js","mappings":";AAuBA;AAOA;AACA;AAGA;AACA;AAOA;AACA;AAOA;AACA;AAGA;AACA;AAGA;AACA;AAQA;AACA;AAGA;AACA;AAWA;ACzEA;AAGA","sources":["webpack://@tatuarvela/wisp/./src/controls/TimeInput.tsx","webpack://@tatuarvela/wisp/./src/controls/ControlWrapper.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nimport ControlWrapper, { ControlWrapperProps } from './ControlWrapper';\n\nexport const TimeInputThemeProperties = [\n  'TimeInputWrapper',\n  'TimeInputLabel',\n  'TimeInputControl',\n  'TimeInputField',\n  'TimeInputValue',\n  'TimeInputSeparator',\n  'TimeInputButtons',\n  'TimeInputIncreaseButton',\n  'TimeInputDecreaseButton',\n] as const;\n\nexport type Time = {\n  hours: number;\n  minutes: number;\n};\n\nconst TimeInputWrapper = styled(ControlWrapper)`\n  ${(props) => props.theme.controls.TimeInputWrapper}\n`;\n\nexport interface TimeInputLabelProps {\n  disabled?: boolean;\n}\n\nconst TimeInputLabel = styled.label<TimeInputLabelProps>`\n  ${(props) => props.theme.controls.TimeInputLabel}\n`;\n\nconst TimeInputControl = styled.div`\n  ${(props) => props.theme.controls.TimeInputControl}\n`;\n\nexport interface TimeInputFieldProps {\n  disabled?: boolean;\n}\n\nconst TimeInputField = styled.div<TimeInputFieldProps>`\n  ${(props) => props.theme.controls.TimeInputField}\n`;\n\nexport interface TimeInputValueProps {\n  disabled?: boolean;\n}\n\nconst TimeInputValue = styled.input<TimeInputValueProps>`\n  ${(props) => props.theme.controls.TimeInputValue}\n`;\n\nconst TimeInputSeparator = styled.div`\n  ${(props) => props.theme.controls.TimeInputSeparator}\n`;\n\nconst TimeInputButtons = styled.div`\n  ${(props) => props.theme.controls.TimeInputButtons}\n`;\n\nexport interface TimeInputButtonProps {\n  active?: boolean;\n  disabled?: boolean;\n}\n\nconst TimeInputDecreaseButton = styled.button<TimeInputButtonProps>`\n  ${(props) => props.theme.controls.TimeInputDecreaseButton}\n`;\n\nconst TimeInputIncreaseButton = styled.button<TimeInputButtonProps>`\n  ${(props) => props.theme.controls.TimeInputIncreaseButton}\n`;\n\nexport interface TimeInputProps extends ControlWrapperProps {\n  disabled?: boolean;\n  label?: string;\n  nullable?: boolean;\n  onChange(value: Time): void;\n  value?: Time;\n}\n\nexport const TimeInput = ({\n  disabled,\n  inlineLabel,\n  label,\n  onChange,\n  value,\n}: TimeInputProps) => {\n  const [activeField, setActiveField] = useState<keyof Time>('hours');\n  const [activeButton, setActiveButton] = useState<\n    'increase' | 'decrease' | undefined\n  >();\n  const [activeButtonTimeout, setActiveButtonTimeout] =\n    useState<NodeJS.Timeout>();\n\n  const hoursRef = useRef<HTMLInputElement>(null);\n  const minutesRef = useRef<HTMLInputElement>(null);\n  const increaseButtonRef = useRef<HTMLButtonElement>(null);\n  const decreaseButtonRef = useRef<HTMLButtonElement>(null);\n\n  const hoursDisplay = value?.hours.toString().padStart(2, '0') ?? '00';\n  const minutesDisplay = value?.minutes.toString().padStart(2, '0') ?? '00';\n\n  const buttonClickHandler = (button: 'increase' | 'decrease') => () => {\n    if (disabled) return;\n    onChange(changeTime(value, activeField, button === 'increase' ? 1 : -1));\n    setActiveButton(button);\n    clearTimeout(activeButtonTimeout);\n    setActiveButtonTimeout(\n      setTimeout(() => {\n        setActiveButton(undefined);\n      }, 200)\n    );\n  };\n\n  const changeHandler = (field: keyof Time) => (e) => {\n    if (disabled) return;\n    onChange({\n      ...value,\n      [field]: parseInt(e.target.value.substr(-2)),\n    });\n  };\n\n  const blurHandler = () => {\n    if (disabled) return;\n    value && onChange(constrainTime(value));\n  };\n\n  const keyDownHandler = (e) => {\n    if (disabled) return;\n    if (e.key === 'ArrowUp') {\n      e.preventDefault();\n      increaseButtonRef.current?.click();\n    }\n    if (e.key === 'ArrowDown') {\n      e.preventDefault();\n      decreaseButtonRef.current?.click();\n    }\n  };\n\n  return (\n    <TimeInputWrapper inlineLabel={inlineLabel}>\n      {label && <TimeInputLabel disabled={disabled}>{label}</TimeInputLabel>}\n      <TimeInputControl>\n        <TimeInputField disabled={disabled}>\n          <TimeInputValue\n            disabled={disabled}\n            onBlur={blurHandler}\n            onChange={changeHandler('hours')}\n            onFocus={() => setActiveField('hours')}\n            onKeyDown={keyDownHandler}\n            ref={hoursRef}\n            value={hoursDisplay}\n          />\n          <TimeInputSeparator />\n          <TimeInputValue\n            disabled={disabled}\n            onBlur={blurHandler}\n            onChange={changeHandler('minutes')}\n            onFocus={() => setActiveField('minutes')}\n            onKeyDown={keyDownHandler}\n            ref={minutesRef}\n            value={minutesDisplay}\n          />\n        </TimeInputField>\n        <TimeInputButtons>\n          <TimeInputIncreaseButton\n            disabled={disabled}\n            ref={increaseButtonRef}\n            onClick={buttonClickHandler('increase')}\n            active={activeButton === 'increase'}\n            tabIndex={-1}\n          />\n          <TimeInputDecreaseButton\n            disabled={disabled}\n            ref={decreaseButtonRef}\n            onClick={buttonClickHandler('decrease')}\n            active={activeButton === 'decrease'}\n            tabIndex={-1}\n          />\n        </TimeInputButtons>\n      </TimeInputControl>\n    </TimeInputWrapper>\n  );\n};\n\nconst constrainTime = (time: Time): Time => {\n  const getMinutes = () => {\n    if (time.hours >= 24) {\n      return 0;\n    }\n    if (time.hours < 0) {\n      return 0;\n    }\n    return Math.max(0, Math.min(time.minutes, 59));\n  };\n\n  return {\n    hours: Math.max(0, Math.min(time.hours, 24)),\n    minutes: getMinutes(),\n  };\n};\n\nconst changeTime = (\n  { hours, minutes }: Time,\n  field: keyof Time,\n  change: number\n): Time => {\n  if (field === 'hours') {\n    const changedHours = hours + change;\n    return constrainTime({\n      hours: changedHours,\n      minutes: minutes,\n    });\n  }\n\n  if (field === 'minutes') {\n    const changedMinutes = minutes + change;\n    if (changedMinutes < 0) {\n      if (hours === 0) {\n        return {\n          hours: 0,\n          minutes: 0,\n        };\n      }\n\n      return constrainTime({\n        hours: hours - Math.ceil(-changedMinutes / 60),\n        minutes: 60 + changedMinutes,\n      });\n    }\n\n    if (changedMinutes >= 60) {\n      return constrainTime({\n        hours: hours + Math.round(changedMinutes / 60),\n        minutes: changedMinutes % 60,\n      });\n    }\n\n    return constrainTime({\n      hours: hours,\n      minutes: changedMinutes,\n    });\n  }\n};\n\nexport default TimeInput;\n","import styled from 'styled-components';\n\nexport const ControlWrapperThemeProperties = ['ControlWrapper'] as const;\n\nexport interface ControlWrapperProps {\n  inlineLabel?: boolean;\n}\n\n// internal\nconst ControlWrapper = styled.div<ControlWrapperProps>`\n  ${(props) => props.theme.controls.ControlWrapper}\n`;\n\nexport default ControlWrapper;\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"controls-ListBox-stories.a586ca6c.iframe.bundle.js","mappings":";AAUA;AAGA;ACWA;AAMA;AACA;AAGA;AACA;AAMA;AACA;AAMA;AACA;AAMA;AACA;AAGA;AACA;AAUA","sources":["webpack://@tatuarvela/wisp/./src/controls/ControlWrapper.tsx","webpack://@tatuarvela/wisp/./src/controls/ListBox.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ControlWrapperThemeProperties = ['ControlWrapper'] as const;\n\nexport interface ControlWrapperProps {\n  inlineLabel?: boolean;\n}\n\n// internal\nconst ControlWrapper = styled.div<ControlWrapperProps>`\n  ${(props) => props.theme.controls.ControlWrapper}\n`;\n\nexport default ControlWrapper;\n","import {\n  autoUpdate,\n  flip,\n  FloatingPortal,\n  size,\n  useFloating,\n} from '@floating-ui/react';\nimport { Listbox as HeadlessListBox } from '@headlessui/react';\nimport React, { useRef } from 'react';\nimport styled from 'styled-components';\n\nimport ControlWrapper, { ControlWrapperProps } from './ControlWrapper';\n\nexport const ListBoxThemeProperties = [\n  'ListBoxButton',\n  'ListBoxControl',\n  'ListBoxValue',\n  'ListBoxLabel',\n  'ListBoxOption',\n  'ListBoxOptions',\n  'ListBoxWrapper',\n] as const;\n\nconst ListBoxWrapper = styled(ControlWrapper)`\n  ${(props) => props.theme.controls.ListBoxWrapper}\n`;\n\nexport interface ListBoxLabelProps {\n  disabled?: boolean;\n}\nconst ListBoxLabel = styled.label<ListBoxLabelProps>`\n  ${(props) => props.theme.controls.ListBoxLabel}\n`;\n\nconst ListBoxControl = styled.div`\n  ${(props) => props.theme.controls.ListBoxControl}\n`;\n\nexport interface ListBoxValueProps {\n  disabled?: boolean;\n}\nconst ListBoxValue = styled.div<ListBoxValueProps>`\n  ${(props) => props.theme.controls.ListBoxValue}\n`;\n\nexport interface ListBoxButtonProps {\n  disabled?: boolean;\n}\nconst ListBoxButton = styled(HeadlessListBox.Button)<ListBoxButtonProps>`\n  ${(props) => props.theme.controls.ListBoxButton}\n`;\n\nexport interface ListBoxOptionsProps {\n  open: boolean;\n}\nconst ListBoxOptions = styled(HeadlessListBox.Options)<ListBoxOptionsProps>`\n  ${(props) => props.theme.controls.ListBoxOptions}\n`;\n\nconst ListBoxOption = styled(HeadlessListBox.Option)`\n  ${(props) => props.theme.controls.ListBoxOption}\n`;\n\nexport interface ListBoxProps extends ControlWrapperProps {\n  disabled?: boolean;\n  label?: string;\n  onChange(value?: string): void;\n  options: string[];\n  value?: string;\n}\nexport const ListBox = ({\n  disabled,\n  inlineLabel,\n  label,\n  onChange,\n  options,\n  value,\n}: ListBoxProps) => (\n  <HeadlessListBox disabled={disabled} value={value ?? ''} onChange={onChange}>\n    {({ open }) => (\n      <FloatingListBox\n        disabled={disabled}\n        inlineLabel={inlineLabel}\n        label={label}\n        open={open}\n        options={options}\n        value={value}\n      />\n    )}\n  </HeadlessListBox>\n);\n\ntype FloatingListBoxProps = Omit<ListBoxProps, 'onChange'> & { open: boolean };\nconst FloatingListBox = ({\n  disabled,\n  inlineLabel,\n  label,\n  open,\n  options,\n  value,\n}: FloatingListBoxProps) => {\n  const buttonRef = useRef<HTMLButtonElement>(null);\n\n  const { refs, floatingStyles, context } = useFloating<HTMLElement>({\n    placement: 'bottom-start',\n    open: open,\n    whileElementsMounted: autoUpdate,\n    middleware: [\n      flip({ flipAlignment: false }),\n      size({\n        apply({ availableHeight, availableWidth, elements, rects }) {\n          Object.assign(elements.floating.style, {\n            maxHeight: `${availableHeight}px`,\n            maxWidth: `${availableWidth}px`,\n            minWidth: `${rects.reference.width}px`,\n          });\n        },\n      }),\n    ],\n  });\n\n  const onValueClick = () => {\n    open\n      ? buttonRef?.current?.parentElement.click()\n      : buttonRef?.current?.click();\n  };\n\n  return (\n    <ListBoxWrapper inlineLabel={inlineLabel}>\n      {label && <ListBoxLabel disabled={disabled}>{label}</ListBoxLabel>}\n      <ListBoxControl ref={refs.setReference}>\n        <ListBoxValue disabled={disabled} onClick={onValueClick}>\n          {value}\n        </ListBoxValue>\n        <ListBoxButton disabled={disabled} ref={buttonRef} />\n        {open && (\n          <FloatingPortal>\n            <div\n              ref={refs.setFloating}\n              style={{\n                ...floatingStyles,\n              }}\n            >\n              <ListBoxOptions open={open}>\n                {options.map((option, i) => (\n                  <ListBoxOption key={option} value={option}>\n                    {option}\n                  </ListBoxOption>\n                ))}\n              </ListBoxOptions>\n            </div>\n          </FloatingPortal>\n        )}\n      </ListBoxControl>\n    </ListBoxWrapper>\n  );\n};\n\nexport default ListBox;\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"controls-ComboBox-stories.6e5d7b00.iframe.bundle.js","mappings":";AAwBA;AAOA;AACA;AAGA;AACA;AAOA;AACA;AAOA;AACA;AAOA;AACA;AAGA;AACA;AAYA;AClEA;AAGA","sources":["webpack://@tatuarvela/wisp/./src/controls/ComboBox.tsx","webpack://@tatuarvela/wisp/./src/controls/ControlWrapper.tsx"],"sourcesContent":["import {\n  autoUpdate,\n  flip,\n  FloatingPortal,\n  size,\n  useFloating,\n} from '@floating-ui/react';\nimport { Combobox as HeadlessComboBox } from '@headlessui/react';\nimport React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nimport ControlWrapper, { ControlWrapperProps } from './ControlWrapper';\n\nexport const ComboBoxThemeProperties = [\n  'ComboBoxButton',\n  'ComboBoxControl',\n  'ComboBoxInput',\n  'ComboBoxLabel',\n  'ComboBoxOption',\n  'ComboBoxOptions',\n  'ComboBoxWrapper',\n] as const;\n\nconst ComboBoxWrapper = styled(ControlWrapper)`\n  ${(props) => props.theme.controls.ComboBoxWrapper}\n`;\n\nexport interface ComboBoxLabelProps {\n  disabled?: boolean;\n}\n\nconst ComboBoxLabel = styled.label<ComboBoxLabelProps>`\n  ${(props) => props.theme.controls.ComboBoxLabel}\n`;\n\nconst ComboBoxControl = styled.div`\n  ${(props) => props.theme.controls.ComboBoxControl}\n`;\n\nexport interface ComboBoxInputProps {\n  disabled?: boolean;\n}\n\nconst ComboBoxInput = styled(HeadlessComboBox.Input)<ComboBoxInputProps>`\n  ${(props) => props.theme.controls.ComboBoxInput}\n`;\n\nexport interface ComboBoxButtonProps {\n  disabled?: boolean;\n}\n\nconst ComboBoxButton = styled(HeadlessComboBox.Button)<ComboBoxButtonProps>`\n  ${(props) => props.theme.controls.ComboBoxButton}\n`;\n\nexport interface ComboBoxOptionsProps {\n  open: boolean;\n}\n\nconst ComboBoxOptions = styled(HeadlessComboBox.Options)<ComboBoxOptionsProps>`\n  ${(props) => props.theme.controls.ComboBoxOptions}\n`;\n\nconst ComboBoxOption = styled(HeadlessComboBox.Option)`\n  ${(props) => props.theme.controls.ComboBoxOption}\n`;\n\nexport interface ComboBoxProps extends ControlWrapperProps {\n  disabled?: boolean;\n  label?: string;\n  nullable?: boolean;\n  onChange(value?: string): void;\n  options: string[];\n  value?: string;\n}\n\nexport const ComboBox = ({\n  disabled,\n  label,\n  nullable,\n  onChange,\n  options,\n  value,\n  inlineLabel,\n}: ComboBoxProps) => {\n  return (\n    <HeadlessComboBox\n      disabled={disabled}\n      value={value ?? ''}\n      onChange={onChange}\n      nullable={nullable ? true : undefined}\n    >\n      {({ open }) => (\n        <FloatingComboBox\n          disabled={disabled}\n          inlineLabel={inlineLabel}\n          label={label}\n          open={open}\n          options={options}\n          value={value}\n        />\n      )}\n    </HeadlessComboBox>\n  );\n};\n\ntype FloatingComboBoxProps = Omit<ComboBoxProps, 'onChange'> & {\n  open: boolean;\n};\nconst FloatingComboBox = ({\n  disabled,\n  inlineLabel,\n  label,\n  open,\n  options,\n}: FloatingComboBoxProps) => {\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [query, setQuery] = useState<string>('');\n\n  const { refs, floatingStyles } = useFloating<HTMLElement>({\n    placement: 'bottom-start',\n    strategy: 'fixed',\n    open: open,\n    whileElementsMounted: autoUpdate,\n    middleware: [\n      flip({ flipAlignment: false }),\n      size({\n        apply({ availableHeight, availableWidth, elements, rects }) {\n          Object.assign(elements.floating.style, {\n            maxHeight: `${availableHeight}px`,\n            maxWidth: `${availableWidth}px`,\n            minWidth: `${rects.reference.width}px`,\n          });\n        },\n      }),\n    ],\n  });\n\n  const onInputClick = () => {\n    buttonRef?.current?.click();\n  };\n\n  const filteredOptions =\n    query === ''\n      ? options\n      : options.filter((option) => {\n          return option.toLowerCase().includes(query.toLowerCase());\n        });\n\n  return (\n    <ComboBoxWrapper inlineLabel={inlineLabel}>\n      {label && <ComboBoxLabel disabled={disabled}>{label}</ComboBoxLabel>}\n      <ComboBoxControl ref={refs.setReference}>\n        <ComboBoxInput\n          disabled={disabled}\n          onClick={onInputClick}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <ComboBoxButton disabled={disabled} ref={buttonRef} />\n        {open && (\n          <FloatingPortal>\n            <div\n              ref={refs.setFloating}\n              style={{\n                ...floatingStyles,\n                zIndex: 100,\n              }}\n            >\n              <ComboBoxOptions open={filteredOptions.length > 0 && open}>\n                {filteredOptions.map((option) => (\n                  <ComboBoxOption key={option} value={option}>\n                    {option}\n                  </ComboBoxOption>\n                ))}\n              </ComboBoxOptions>\n            </div>\n          </FloatingPortal>\n        )}\n      </ComboBoxControl>\n    </ComboBoxWrapper>\n  );\n};\n\nexport default ComboBox;\n","import styled from 'styled-components';\n\nexport const ControlWrapperThemeProperties = ['ControlWrapper'] as const;\n\nexport interface ControlWrapperProps {\n  inlineLabel?: boolean;\n}\n\n// internal\nconst ControlWrapper = styled.div<ControlWrapperProps>`\n  ${(props) => props.theme.controls.ControlWrapper}\n`;\n\nexport default ControlWrapper;\n"],"names":[],"sourceRoot":""}
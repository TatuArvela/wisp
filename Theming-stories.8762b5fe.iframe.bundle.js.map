{"version":3,"file":"Theming-stories.8762b5fe.iframe.bundle.js","mappings":";AAKA;AAGA;ACIA;AASA;AACA;AAGA;ACfA;AAGA;ACWA;AAMA;AACA;AAGA;AACA;AAMA;AACA;AAMA;AACA;AAMA;AACA;AAGA;AACA;AAUA;AC5DA;AAGA;ACRA;AAGA;ACIA;AAGA","sources":["webpack://@tatuarvela/wisp/./src/controls/AlertText.tsx","webpack://@tatuarvela/wisp/./src/controls/Button.tsx","webpack://@tatuarvela/wisp/./src/controls/ControlWrapper.tsx","webpack://@tatuarvela/wisp/./src/controls/ListBox.tsx","webpack://@tatuarvela/wisp/./src/controls/AlertButton.tsx","webpack://@tatuarvela/wisp/./src/controls/AlertContent.tsx","webpack://@tatuarvela/wisp/./src/window/AlertWindow.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const AlertTextThemeProperties = ['AlertText'] as const;\n\nexport const AlertText = styled.div`\n  ${(props) => props.theme.controls.AlertText}\n`;\n\nexport default AlertText;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const ButtonThemeProperties = ['Button', 'ButtonWrapper'] as const;\n\nexport interface ButtonWrapperProps {\n  disabled?: boolean;\n  height?: number;\n  width?: number;\n}\n\nconst ButtonWrapper = styled.div<ButtonWrapperProps>`\n  ${(props) => props.theme.controls.ButtonWrapper}\n`;\n\nexport interface ButtonProps extends React.ComponentPropsWithoutRef<'button'> {\n  disabled?: boolean;\n  height?: number;\n  width?: number;\n}\n\nconst ButtonElement = styled.button`\n  ${(props) => props.theme.controls.Button}\n`;\n\nexport const Button = ({ width, height, disabled, ...rest }: ButtonProps) => (\n  <ButtonWrapper\n    disabled={disabled}\n    style={{ width: `${width}px`, height: `${height}px` }}\n  >\n    <ButtonElement disabled={disabled} {...rest} />\n  </ButtonWrapper>\n);\n\nexport default Button;\n","import styled from 'styled-components';\n\nexport const ControlWrapperThemeProperties = ['ControlWrapper'] as const;\n\nexport interface ControlWrapperProps {\n  inlineLabel?: boolean;\n}\n\n// internal\nconst ControlWrapper = styled.div<ControlWrapperProps>`\n  ${(props) => props.theme.controls.ControlWrapper}\n`;\n\nexport default ControlWrapper;\n","import {\n  autoUpdate,\n  flip,\n  FloatingPortal,\n  size,\n  useFloating,\n} from '@floating-ui/react';\nimport { Listbox as HeadlessListBox } from '@headlessui/react';\nimport React, { useRef } from 'react';\nimport styled from 'styled-components';\n\nimport ControlWrapper, { ControlWrapperProps } from './ControlWrapper';\n\nexport const ListBoxThemeProperties = [\n  'ListBoxButton',\n  'ListBoxControl',\n  'ListBoxValue',\n  'ListBoxLabel',\n  'ListBoxOption',\n  'ListBoxOptions',\n  'ListBoxWrapper',\n] as const;\n\nconst ListBoxWrapper = styled(ControlWrapper)`\n  ${(props) => props.theme.controls.ListBoxWrapper}\n`;\n\nexport interface ListBoxLabelProps {\n  disabled?: boolean;\n}\nconst ListBoxLabel = styled.label<ListBoxLabelProps>`\n  ${(props) => props.theme.controls.ListBoxLabel}\n`;\n\nconst ListBoxControl = styled.div`\n  ${(props) => props.theme.controls.ListBoxControl}\n`;\n\nexport interface ListBoxValueProps {\n  disabled?: boolean;\n}\nconst ListBoxValue = styled.div<ListBoxValueProps>`\n  ${(props) => props.theme.controls.ListBoxValue}\n`;\n\nexport interface ListBoxButtonProps {\n  disabled?: boolean;\n}\nconst ListBoxButton = styled(HeadlessListBox.Button)<ListBoxButtonProps>`\n  ${(props) => props.theme.controls.ListBoxButton}\n`;\n\nexport interface ListBoxOptionsProps {\n  open: boolean;\n}\nconst ListBoxOptions = styled(HeadlessListBox.Options)<ListBoxOptionsProps>`\n  ${(props) => props.theme.controls.ListBoxOptions}\n`;\n\nconst ListBoxOption = styled(HeadlessListBox.Option)`\n  ${(props) => props.theme.controls.ListBoxOption}\n`;\n\nexport interface ListBoxProps extends ControlWrapperProps {\n  disabled?: boolean;\n  label?: string;\n  onChange(value?: string): void;\n  options: string[];\n  value?: string;\n}\nexport const ListBox = ({\n  disabled,\n  inlineLabel,\n  label,\n  onChange,\n  options,\n  value,\n}: ListBoxProps) => (\n  <HeadlessListBox disabled={disabled} value={value ?? ''} onChange={onChange}>\n    {({ open }) => (\n      <FloatingListBox\n        disabled={disabled}\n        inlineLabel={inlineLabel}\n        label={label}\n        open={open}\n        options={options}\n        value={value}\n      />\n    )}\n  </HeadlessListBox>\n);\n\ntype FloatingListBoxProps = Omit<ListBoxProps, 'onChange'> & { open: boolean };\nconst FloatingListBox = ({\n  disabled,\n  inlineLabel,\n  label,\n  open,\n  options,\n  value,\n}: FloatingListBoxProps) => {\n  const buttonRef = useRef<HTMLButtonElement>(null);\n\n  const { refs, floatingStyles } = useFloating<HTMLElement>({\n    placement: 'bottom-start',\n    open: open,\n    whileElementsMounted: autoUpdate,\n    middleware: [\n      flip({ flipAlignment: false }),\n      size({\n        apply({ availableHeight, availableWidth, elements, rects }) {\n          Object.assign(elements.floating.style, {\n            maxHeight: `${availableHeight}px`,\n            maxWidth: `${availableWidth}px`,\n            minWidth: `${rects.reference.width}px`,\n          });\n        },\n      }),\n    ],\n  });\n\n  const onValueClick = () => {\n    open\n      ? buttonRef?.current?.parentElement.click()\n      : buttonRef?.current?.click();\n  };\n\n  return (\n    <ListBoxWrapper inlineLabel={inlineLabel}>\n      {label && <ListBoxLabel disabled={disabled}>{label}</ListBoxLabel>}\n      <ListBoxControl ref={refs.setReference}>\n        <ListBoxValue disabled={disabled} onClick={onValueClick}>\n          {value}\n        </ListBoxValue>\n        <ListBoxButton disabled={disabled} ref={buttonRef} />\n        {open && (\n          <FloatingPortal>\n            <div\n              ref={refs.setFloating}\n              style={{\n                ...floatingStyles,\n              }}\n            >\n              <ListBoxOptions open={open}>\n                {options.map((option, i) => (\n                  <ListBoxOption key={option} value={option}>\n                    {option}\n                  </ListBoxOption>\n                ))}\n              </ListBoxOptions>\n            </div>\n          </FloatingPortal>\n        )}\n      </ListBoxControl>\n    </ListBoxWrapper>\n  );\n};\n\nexport default ListBox;\n","import React, { ComponentProps } from 'react';\nimport styled from 'styled-components';\n\nimport Button from '../controls/Button';\nimport { useWindow } from '../window';\nimport { useWindowManager } from '../windowManager/hooks';\n\nexport const AlertButtonThemeProperties = ['AlertButton'] as const;\n\nconst StyledAlertButton = styled(Button)`\n  ${(props) => props.theme.controls.AlertButton}\n`;\n\nconst AlertButton = (props: ComponentProps<typeof StyledAlertButton>) => {\n  const { id } = useWindow();\n  const { closeWindow } = useWindowManager();\n  const defaultOnClick = () => closeWindow(id);\n  const onClick = props.onClick ?? defaultOnClick;\n  return <StyledAlertButton {...props} onClick={onClick} />;\n};\n\nexport default AlertButton;\n","import styled from 'styled-components';\n\nexport const AlertContentThemeProperties = ['AlertContent'] as const;\n\nexport const AlertContent = styled.div`\n  ${(props) => props.theme.controls.AlertContent}\n`;\n\nexport default AlertContent;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport AlertButton from '../controls/AlertButton';\nimport AlertContent from '../controls/AlertContent';\nimport AlertText from '../controls/AlertText';\nimport { Icon } from '../icons';\nimport { getIconFileForSize } from '../icons/utils';\nimport { useThemeManager } from '../themeManager/hooks';\nimport Window, { WindowProps } from './Window';\n\nconst AlertIconElement = styled.img`\n  ${(props) => props.theme.controls.AlertIcon}\n`;\n\nconst AlertIcon = ({ icon }: { icon: string | Icon }) => {\n  const { theme } = useThemeManager();\n\n  const resolvedIcon = typeof icon === 'string' ? theme.icons[icon] : icon;\n  if (!resolvedIcon) {\n    return null;\n  }\n\n  const iconFile = getIconFileForSize(resolvedIcon);\n  return <AlertIconElement src={iconFile} alt=\"Alert icon\" />;\n};\n\nexport type AlertWindowProps = WindowProps & {\n  alertIcon?: string | Icon;\n  buttonText?: string;\n  onButtonClick?(): void;\n};\n\nexport const AlertWindow = ({\n  alertIcon = 'warning',\n  buttonText = 'OK',\n  onButtonClick,\n  ...windowProps\n}: AlertWindowProps) => (\n  <Window\n    {...windowProps}\n    id={windowProps.id}\n    title={windowProps.title}\n    alwaysShowCloseButton={windowProps.alwaysShowCloseButton ?? true}\n    isClosable={windowProps.isClosable ?? false}\n    isMaximizable={windowProps.isMaximizable ?? false}\n    isMinimizable={windowProps.isMinimizable ?? false}\n    isResizable={windowProps.isResizable ?? false}\n  >\n    <AlertContent>\n      <AlertIcon icon={alertIcon} />\n      <AlertText>{windowProps.children}</AlertText>\n    </AlertContent>\n    <AlertButton onClick={onButtonClick} type=\"button\">\n      {buttonText}\n    </AlertButton>\n  </Window>\n);\n\nexport default AlertWindow;\n"],"names":[],"sourceRoot":""}
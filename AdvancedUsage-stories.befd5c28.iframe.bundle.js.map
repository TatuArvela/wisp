{"version":3,"file":"AdvancedUsage-stories.befd5c28.iframe.bundle.js","mappings":";AAWA;AAGA;AAUA;AAGA;ACXA;AAGA;AAcA;AAGA;AC/BA;AAGA;ACAA;AAGA;ACOA;AAGA;AACA;AAGA;AACA;AAGA;AAiBA;AAGA","sources":["webpack://@tatuarvela/wisp/./src/controls/MenuBar.tsx","webpack://@tatuarvela/wisp/./src/controls/StatusBar.tsx","webpack://@tatuarvela/wisp/./src/controls/StatusBarSection.tsx","webpack://@tatuarvela/wisp/./src/controls/Toolbar.tsx","webpack://@tatuarvela/wisp/./src/controls/ToolbarButton.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport const MenuBarThemeProperties = ['MenuBar', 'MenuBarThrobber'] as const;\n\ninterface MenuBarProps {\n  children?: React.ReactNode;\n  isThrobberAnimated?: boolean;\n}\n\nconst MenuBarElement = styled.div`\n  ${(props) => props.theme.controls.MenuBar}\n`;\n\nconst MenuBar = ({ children, isThrobberAnimated }: MenuBarProps) => {\n  return (\n    <MenuBarElement>\n      {children}\n      <MenuBarThrobber isAnimated={isThrobberAnimated} />\n    </MenuBarElement>\n  );\n};\n\nconst MenuBarThrobber = styled.div<{ isAnimated: boolean }>`\n  ${(props) => props.theme.controls.MenuBarThrobber}\n`;\n\nexport default MenuBar;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { windowResizeHandler } from '../window/handlers/windowResizeHandler';\nimport { useWindowManager } from '../windowManager/hooks';\nimport { Direction, WindowType } from '../windowManager/types';\n\nexport const StatusBarThemeProperties = ['ResizeHandle', 'StatusBar'] as const;\n\ninterface StatusBarProps {\n  children?: React.ReactNode;\n  showResizeHandle?: boolean;\n  window?: WindowType;\n}\n\nconst StatusBarElement = styled.div`\n  ${(props) => props.theme.controls.StatusBar}\n`;\n\nconst StatusBar = ({ children, showResizeHandle, window }: StatusBarProps) => {\n  return (\n    <StatusBarElement>\n      {children}\n      {showResizeHandle && <ResizeHandle window={window} />}\n    </StatusBarElement>\n  );\n};\n\ninterface ResizeHandleProps {\n  window: WindowType;\n}\n\nconst ResizeHandleElement = styled.div`\n  ${(props) => props.theme.controls.ResizeHandle}\n`;\n\nconst ResizeHandle = ({ window }: ResizeHandleProps): JSX.Element => {\n  const windowManager = useWindowManager();\n  const eventHandler = windowResizeHandler(windowManager, window);\n\n  return (\n    <ResizeHandleElement onMouseDown={(e) => eventHandler(e, Direction.SE)} />\n  );\n};\n\nexport default StatusBar;\n","import styled from 'styled-components';\n\nexport const StatusBarSectionThemeProperties = ['StatusBarSection'] as const;\n\nconst StatusBarSection = styled.div`\n  ${(props) => props.theme.controls.StatusBarSection}\n`;\n\nexport default StatusBarSection;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface ToolbarProps {\n  children?: React.ReactNode;\n}\n\nconst ToolbarElement = styled.div`\n  ${(props) => props.theme.controls.Toolbar}\n`;\n\nconst Toolbar = ({ children }: ToolbarProps) => {\n  return <ToolbarElement>{children}</ToolbarElement>;\n};\n\nexport default Toolbar;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Icon } from '../icons/types';\nimport { getIconFileForSize } from '../icons/utils';\n\nexport const ToolbarButtonThemeProperties = [\n  'ToolbarButton',\n  'ToolbarButtonWrapper',\n  'ToolbarButtonLabel',\n  'ToolbarButtonIcon',\n] as const;\n\ninterface ToolbarButtonWrapperProps {\n  disabled?: boolean;\n}\n\nconst ToolbarButtonWrapper = styled.div<ToolbarButtonWrapperProps>`\n  ${(props) => props.theme.controls.ToolbarButtonWrapper}\n`;\n\nconst ToolbarButtonLabel = styled.div`\n  ${(props) => props.theme.controls.ToolbarButtonLabel}\n`;\n\nconst ToolbarButtonIconElement = styled.img`\n  ${(props) => props.theme.controls.ToolbarButtonIcon}\n`;\n\nconst ToolbarButtonIcon = ({ icon }: { icon: Icon }) => {\n  if (!icon) {\n    return null;\n  }\n\n  const iconFile = getIconFileForSize(icon);\n  return <ToolbarButtonIconElement src={iconFile} alt=\"Window icon\" />;\n};\n\ninterface ToolbarButtonProps extends React.ComponentPropsWithoutRef<'button'> {\n  disabled?: boolean;\n  onClick?(): void;\n  icon?: Icon;\n  label?: string;\n}\n\nconst ToolbarButtonElement = styled.button`\n  ${(props) => props.theme.controls.ToolbarButton}\n`;\n\nconst ToolbarButton = ({\n  disabled,\n  icon,\n  label,\n  ...rest\n}: ToolbarButtonProps) => {\n  return (\n    <ToolbarButtonWrapper disabled={disabled}>\n      <ToolbarButtonElement disabled={disabled} {...rest}>\n        {icon && <ToolbarButtonIcon icon={icon} />}\n        {label && <ToolbarButtonLabel>{label}</ToolbarButtonLabel>}\n      </ToolbarButtonElement>\n    </ToolbarButtonWrapper>\n  );\n};\n\nexport default ToolbarButton;\n"],"names":[],"sourceRoot":""}
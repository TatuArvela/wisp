{"version":3,"file":"controls-Toolbar-stories.6dc58f19.iframe.bundle.js","mappings":";AAQA;AAGA;ACOA;AAGA;AACA;AAGA;AACA;AAGA;AAkBA;AAGA","sources":["webpack://@tatuarvela/wisp/./src/controls/Toolbar.tsx","webpack://@tatuarvela/wisp/./src/controls/ToolbarButton.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport interface ToolbarProps {\n  children?: React.ReactNode;\n}\n\nconst ToolbarElement = styled.div`\n  ${(props) => props.theme.controls.Toolbar}\n`;\n\nexport const Toolbar = ({ children }: ToolbarProps) => {\n  return <ToolbarElement>{children}</ToolbarElement>;\n};\n\nexport default Toolbar;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Icon } from '../icons/types';\nimport { getIconFileForSize } from '../icons/utils';\n\nexport const ToolbarButtonThemeProperties = [\n  'ToolbarButton',\n  'ToolbarButtonWrapper',\n  'ToolbarButtonLabel',\n  'ToolbarButtonIcon',\n] as const;\n\ninterface ToolbarButtonWrapperProps {\n  disabled?: boolean;\n}\n\nconst ToolbarButtonWrapper = styled.div<ToolbarButtonWrapperProps>`\n  ${(props) => props.theme.controls.ToolbarButtonWrapper}\n`;\n\nconst ToolbarButtonLabel = styled.div`\n  ${(props) => props.theme.controls.ToolbarButtonLabel}\n`;\n\nconst ToolbarButtonIconElement = styled.img`\n  ${(props) => props.theme.controls.ToolbarButtonIcon}\n`;\n\nconst ToolbarButtonIcon = ({ icon }: { icon: Icon }) => {\n  if (!icon) {\n    return null;\n  }\n\n  const iconFile = getIconFileForSize(icon);\n  return <ToolbarButtonIconElement src={iconFile} alt=\"Window icon\" />;\n};\n\nexport interface ToolbarButtonProps\n  extends React.ComponentPropsWithoutRef<'button'> {\n  disabled?: boolean;\n  onClick?(): void;\n  icon?: Icon;\n  label?: string;\n}\n\nconst ToolbarButtonElement = styled.button`\n  ${(props) => props.theme.controls.ToolbarButton}\n`;\n\nexport const ToolbarButton = ({\n  disabled,\n  icon,\n  label,\n  ...rest\n}: ToolbarButtonProps) => {\n  return (\n    <ToolbarButtonWrapper disabled={disabled}>\n      <ToolbarButtonElement disabled={disabled} {...rest}>\n        {icon && <ToolbarButtonIcon icon={icon} />}\n        {label && <ToolbarButtonLabel>{label}</ToolbarButtonLabel>}\n      </ToolbarButtonElement>\n    </ToolbarButtonWrapper>\n  );\n};\n\nexport default ToolbarButton;\n"],"names":[],"sourceRoot":""}
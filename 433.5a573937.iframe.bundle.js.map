{"version":3,"file":"433.5a573937.iframe.bundle.js","mappings":";AAcA;AAGA;AACA;AAGA;AACA;AAGA;ACjBA;AAGA;ACPA;AAGA;;;;;;ACQA;ACZA;AAGA;ACIA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;ACtBA;AAGA;AACA;AAEA;AAKA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;ACjCA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;ACxBA;AAEA;ACmBA;AAEA","sources":["webpack://@tatuarvela/wisp/./src/elements/Taskbar/TaskbarButton.tsx","webpack://@tatuarvela/wisp/./src/elements/Taskbar/Taskbar.tsx","webpack://@tatuarvela/wisp/./src/elements/VersionInfo.tsx","webpack://@tatuarvela/wisp/./src/windowManager/Viewport.tsx","webpack://@tatuarvela/wisp/./src/elements/Desktop.tsx","webpack://@tatuarvela/wisp/./src/window/components/ResizeBorder.tsx","webpack://@tatuarvela/wisp/./src/window/components/TitleBarButtons.tsx","webpack://@tatuarvela/wisp/./src/window/components/TitleBar.tsx","webpack://@tatuarvela/wisp/./src/window/components/WindowContent.tsx","webpack://@tatuarvela/wisp/./src/window/components/WindowElement.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nimport type { Icon } from '../../icons/types';\nimport { getIconFileForSize } from '../../icons/utils';\n\nexport type TaskbarButtonProps = {\n  active: boolean;\n  icon?: Icon;\n  title?: string;\n  onClick(): void;\n};\n\nconst TaskbarButtonElement = styled.button<TaskbarButtonProps>`\n  ${(props) => props.theme.elements.TaskbarButton}\n`;\n\nconst TaskbarButtonTitle = styled.div`\n  ${(props) => props.theme.elements.TaskbarButtonTitle}\n`;\n\nconst TaskbarButtonIconElement = styled.img`\n  ${(props) => props.theme.elements.TaskbarButtonIcon}\n`;\n\nconst TaskbarButtonIcon = ({ icon }: { icon: Icon }) => {\n  if (!icon) {\n    return null;\n  }\n\n  const iconFile = getIconFileForSize(icon);\n  return <TaskbarButtonIconElement src={iconFile} alt=\"Window icon\" />;\n};\n\nconst TaskbarButton = ({\n  active,\n  icon,\n  title,\n  onClick,\n}: TaskbarButtonProps) => {\n  return (\n    <TaskbarButtonElement type=\"button\" active={active} onClick={onClick}>\n      <TaskbarButtonIcon icon={icon} />\n      <TaskbarButtonTitle>{title}</TaskbarButtonTitle>\n    </TaskbarButtonElement>\n  );\n};\n\nexport default TaskbarButton;\n","import React, { useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport { useWindowManager } from '../../windowManager/hooks';\nimport { WindowType } from '../../windowManager/types';\nimport TaskbarButton from './TaskbarButton';\n\nconst TaskbarElement = styled.div`\n  ${(props) => props.theme.elements.Taskbar}\n`;\n\nconst Taskbar = (): JSX.Element => {\n  const { activeWindowId, windows, restoreWindow, setViewportWindowMargins } =\n    useWindowManager();\n  const taskbarRef = React.useRef<HTMLDivElement>();\n\n  const getTaskbarHeight = useCallback(\n    () => taskbarRef.current?.offsetHeight || 0,\n    [taskbarRef]\n  );\n\n  useEffect(() => {\n    setViewportWindowMargins({ bottom: getTaskbarHeight() });\n    return () => setViewportWindowMargins({ bottom: 0 });\n  }, [getTaskbarHeight, setViewportWindowMargins]);\n\n  const mapButtons = ([id, window]: [id: string, window: WindowType]) => (\n    <TaskbarButton\n      key={id}\n      onClick={() => restoreWindow(id)}\n      active={id === activeWindowId}\n      icon={window.icon}\n      title={window.title}\n    />\n  );\n\n  return (\n    <TaskbarElement ref={taskbarRef}>\n      {Array.from(windows.entries())\n        .filter(([id, window]) => window.showAsTask)\n        .map(mapButtons)}\n    </TaskbarElement>\n  );\n};\n\nexport default Taskbar;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst VersionInformationElement = styled.p`\n  ${(props) => props.theme.elements.VersionInfo}\n`;\n\nconst VersionInfo = () => {\n  const version =\n    process.env.PACKAGE_VERSION || process.env.STORYBOOK_PACKAGE_VERSION;\n\n  if (!version) {\n    return null;\n  }\n  return (\n    <VersionInformationElement>\n      Wisp Version {version}\n    </VersionInformationElement>\n  );\n};\nexport default VersionInfo;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nconst ViewportElement = styled.div`\n  box-sizing: border-box;\n  height: 100%;\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n`;\n\nconst Viewport = React.forwardRef<HTMLDivElement, Props>(\n  ({ children }: Props, ref) => (\n    <ViewportElement ref={ref}>{children}</ViewportElement>\n  )\n);\n\nexport default Viewport;\n","import styled from 'styled-components';\n\nconst Desktop = styled.div`\n  ${(props) => props.theme.elements.Desktop}\n`;\n\nexport default Desktop;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Direction } from '../../windowManager/types';\n\ninterface ResizeBorderProps {\n  resize: (event: React.MouseEvent, direction: Direction) => void;\n}\n\nconst NResize = styled.div`\n  ${(props) => props.theme.window.NResize}\n`;\n\nconst NEResize = styled.div`\n  ${(props) => props.theme.window.NEResize}\n`;\n\nconst EResize = styled.div`\n  ${(props) => props.theme.window.EResize}\n`;\n\nconst SEResize = styled.div`\n  ${(props) => props.theme.window.SEResize}\n`;\n\nconst SResize = styled.div`\n  ${(props) => props.theme.window.SResize}\n`;\n\nconst SWResize = styled.div`\n  ${(props) => props.theme.window.SWResize}\n`;\n\nconst WResize = styled.div`\n  ${(props) => props.theme.window.WResize}\n`;\n\nconst NWResize = styled.div`\n  ${(props) => props.theme.window.NWResize}\n`;\n\nconst ResizeBorder = ({ resize }: ResizeBorderProps) => (\n  <>\n    <NResize onMouseDown={(e) => resize(e, Direction.N)} />\n    <EResize onMouseDown={(e) => resize(e, Direction.E)} />\n    <SResize onMouseDown={(e) => resize(e, Direction.S)} />\n    <WResize onMouseDown={(e) => resize(e, Direction.W)} />\n    <NEResize onMouseDown={(e) => resize(e, Direction.NE)} />\n    <SEResize onMouseDown={(e) => resize(e, Direction.SE)} />\n    <SWResize onMouseDown={(e) => resize(e, Direction.SW)} />\n    <NWResize onMouseDown={(e) => resize(e, Direction.NW)} />\n  </>\n);\n\nexport default ResizeBorder;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport interface TitleBarButtonsProps {\n  close(): void;\n\n  isClosable: boolean;\n  isMaximizable: boolean;\n  isMaximized: boolean;\n  isMinimizable: boolean;\n\n  maximize(): void;\n\n  minimize(): void;\n\n  unmaximize(): void;\n}\n\nconst TitleBarButtonsElement = styled.div`\n  ${(props) => props.theme.window.TitleBarButtons}\n`;\n\nconst WindowButton = styled.button`\n  ${(props) => props.theme.window.WindowButton}\n`;\nWindowButton.defaultProps = {\n  type: 'button',\n};\n\nconst MinimizeButton = styled(WindowButton)`\n  ${(props) => props.theme.window.MinimizeButton}\n`;\n\nconst MaximizeButton = styled(WindowButton)`\n  ${(props) => props.theme.window.MaximizeButton}\n`;\n\nconst UnmaximizeButton = styled(WindowButton)`\n  ${(props) => props.theme.window.UnmaximizeButton}\n`;\n\nconst CloseButton = styled(WindowButton)`\n  ${(props) => props.theme.window.CloseButton}\n`;\n\nconst TitleBarButtons = ({\n  close,\n  isClosable,\n  isMaximizable,\n  isMaximized,\n  isMinimizable,\n  maximize,\n  minimize,\n  unmaximize,\n}: TitleBarButtonsProps): JSX.Element => (\n  <TitleBarButtonsElement>\n    {isMinimizable && <MinimizeButton onClick={minimize} />}\n    {isMaximizable &&\n      (isMaximized ? (\n        <UnmaximizeButton onClick={unmaximize} />\n      ) : (\n        <MaximizeButton onClick={maximize} />\n      ))}\n    {isClosable && <CloseButton onClick={close} />}\n  </TitleBarButtonsElement>\n);\nexport default TitleBarButtons;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport type { Icon } from '../../icons/types';\nimport { getIconFileForSize } from '../../icons/utils';\nimport TitleBarButtons from './TitleBarButtons';\n\nexport interface TitleBarElementProps {\n  isActive: boolean;\n}\n\nconst TitleBarElement = styled.div<TitleBarElementProps>`\n  ${(props) => props.theme.window.TitleBar}\n`;\n\nconst TitleContainer = styled.div`\n  ${(props) => props.theme.window.TitleBarTitleContainer}\n`;\n\nconst TitleBarTitle = styled.div`\n  ${(props) => props.theme.window.TitleBarTitle}\n`;\n\nconst TitleBarIconElement = styled.img`\n  ${(props) => props.theme.window.TitleBarIcon}\n`;\n\nconst TitleBarIcon = ({ icon }: { icon: Icon }) => {\n  if (!icon) {\n    return null;\n  }\n\n  const iconFile = getIconFileForSize(icon);\n  return <TitleBarIconElement src={iconFile} alt=\"Window icon\" />;\n};\n\nexport interface TitleBarProps extends TitleBarElementProps {\n  close(): void;\n\n  drag(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\n\n  icon: Icon;\n  isClosable: boolean;\n  isMaximizable: boolean;\n  isMaximized: boolean;\n  isMinimizable: boolean;\n\n  maximize(): void;\n\n  minimize(): void;\n\n  title: string;\n\n  unmaximize(): void;\n}\n\nconst TitleBar = ({\n  close,\n  drag,\n  icon,\n  isActive,\n  isMaximizable,\n  isMaximized,\n  isMinimizable,\n  isClosable,\n  maximize,\n  minimize,\n  title,\n  unmaximize,\n}: TitleBarProps) => {\n  const onTitleDoubleClick = () => {\n    isMaximized ? unmaximize() : maximize();\n  };\n\n  return (\n    <TitleBarElement isActive={isActive}>\n      <TitleContainer onMouseDown={drag} onDoubleClick={onTitleDoubleClick}>\n        <TitleBarIcon icon={icon} />\n        <TitleBarTitle>{title}</TitleBarTitle>\n      </TitleContainer>\n      <TitleBarButtons\n        close={close}\n        isClosable={isClosable}\n        isMaximizable={isMaximizable}\n        isMaximized={isMaximized}\n        isMinimizable={isMinimizable}\n        maximize={maximize}\n        minimize={minimize}\n        unmaximize={unmaximize}\n      />\n    </TitleBarElement>\n  );\n};\n\nexport default TitleBar;\n","import styled from 'styled-components';\n\nconst WindowContent = styled.div`\n  ${(props) => props.theme.window.WindowContent}\n`;\nexport default WindowContent;\n","import styled from 'styled-components';\n\nimport { ViewportWindowMargins } from '../../windowManager/types';\n\nexport interface WindowElementProps {\n  height: number;\n  width: number;\n  positionX: number;\n  positionY: number;\n  isMinimized: boolean;\n  isMaximized: boolean;\n  orderNumber: number;\n  viewportWindowMargins: ViewportWindowMargins;\n}\n\nconst WindowElement = styled.div.attrs((props: WindowElementProps) => ({\n  style: {\n    top: `${props.positionY}px`,\n    width: `${props.width}px`,\n    height: `${props.height}px`,\n    left: `${props.positionX}px`,\n    zIndex: props.orderNumber,\n  },\n}))<WindowElementProps>`\n  ${(props) => props.theme.window.WindowElement}\n`;\nexport default WindowElement;\n"],"names":[],"sourceRoot":""}
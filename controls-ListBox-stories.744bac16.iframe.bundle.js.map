{"version":3,"file":"controls-ListBox-stories.744bac16.iframe.bundle.js","mappings":";AAUA;AAGA;ACIA;AAGA;AACA;AAGA;AACA;AASA;AACA;AAGA;AACA;AASA","sources":["webpack://@tatuarvela/wisp/./src/controls/ControlWrapper.tsx","webpack://@tatuarvela/wisp/./src/controls/ListBox.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ControlWrapperThemeProperties = ['ControlWrapper'] as const;\n\nexport interface ControlWrapperProps {\n  inlineLabel?: boolean;\n}\n\n// internal\nconst ControlWrapper = styled.div<ControlWrapperProps>`\n  ${(props) => props.theme.controls.ControlWrapper}\n`;\n\nexport default ControlWrapper;\n","import { Listbox as HeadlessListBox } from '@headlessui/react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Portal } from 'react-portal';\nimport styled from 'styled-components';\n\nimport { useWindow } from '../window/WindowContext';\nimport ControlWrapper, { ControlWrapperProps } from './ControlWrapper';\n\nexport const ListBoxThemeProperties = [\n  'ListBoxButton',\n  'ListBoxLabel',\n  'ListBoxOption',\n  'ListBoxOptions',\n  'ListBoxWrapper',\n] as const;\n\nconst ListBoxWrapper = styled(ControlWrapper)`\n  ${(props) => props.theme.controls.ListBoxWrapper}\n`;\n\nconst ListBoxLabel = styled.label`\n  ${(props) => props.theme.controls.ListBoxLabel}\n`;\n\nconst ListBoxButton = styled(HeadlessListBox.Button)`\n  ${(props) => props.theme.controls.ListBoxButton}\n`;\n\nexport interface ListBoxOptionsProps {\n  open: boolean;\n  width: number;\n  left: number;\n  top: number;\n}\nconst ListBoxOptions = styled(HeadlessListBox.Options)<ListBoxOptionsProps>`\n  ${(props) => props.theme.controls.ListBoxOptions}\n`;\n\nconst ListBoxOption = styled(HeadlessListBox.Option)`\n  ${(props) => props.theme.controls.ListBoxOption}\n`;\n\ninterface ListBoxProps extends ControlWrapperProps {\n  label?: string;\n  onChange(value?: string): void;\n  options: string[];\n  value?: string;\n}\nconst ListBox = ({\n  inlineLabel,\n  label,\n  onChange,\n  options,\n  value,\n}: ListBoxProps) => {\n  const window = useWindow();\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [sizes, setSizes] = useState<{\n    width: number;\n    left: number;\n    top: number;\n  }>({ width: 0, left: 0, top: 0 });\n\n  useEffect(() => {\n    if (window) {\n      const rect = buttonRef?.current.getBoundingClientRect() ?? {\n        width: 0,\n        left: 0,\n        top: 0,\n        height: 0,\n      };\n      setSizes({\n        width: rect.width,\n        left: rect.left,\n        top: rect.top + rect.height,\n      });\n    }\n  }, [window]);\n\n  return (\n    <HeadlessListBox value={value ?? ''} onChange={onChange}>\n      {({ open }) => (\n        <ListBoxWrapper inlineLabel={inlineLabel}>\n          {label && <ListBoxLabel>{label}</ListBoxLabel>}\n          <ListBoxButton ref={buttonRef}>{value}</ListBoxButton>\n          <Portal>\n            <ListBoxOptions open={open} {...sizes}>\n              {options.map((option) => (\n                <ListBoxOption key={option} value={option}>\n                  {option}\n                </ListBoxOption>\n              ))}\n            </ListBoxOptions>\n          </Portal>\n        </ListBoxWrapper>\n      )}\n    </HeadlessListBox>\n  );\n};\n\nexport default ListBox;\n"],"names":[],"sourceRoot":""}
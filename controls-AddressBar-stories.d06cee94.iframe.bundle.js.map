{"version":3,"file":"controls-AddressBar-stories.d06cee94.iframe.bundle.js","mappings":";AA4BA;AAOA;AACA;AAOA;AACA;AAOA;AACA;AAGA;AACA;AAQA","sources":["webpack://@tatuarvela/wisp/./src/controls/AddressBar.tsx"],"sourcesContent":["import React, { useRef } from 'react';\nimport styled from 'styled-components';\n\nimport type { Icon } from '../icons';\nimport { getIconFileForSize } from '../icons/utils';\nimport { useThemeManager } from '../themeManager/hooks';\n\nexport const AddressBarThemeProperties = [\n  'AddressBarElement',\n  'AddressBarInput',\n  'AddressBarInputContainer',\n  'AddressBarIcon',\n  'AddressBarLabel',\n] as const;\n\nexport interface AddressBarProps {\n  disabled?: boolean;\n  icon?: Icon;\n  label?: string;\n  onChange(value: string): void;\n  value?: string;\n}\n\nexport interface AddressBarElementProps {\n  disabled?: boolean;\n}\n\nconst AddressBarElement = styled.div<AddressBarElementProps>`\n  ${(props) => props.theme.controls.AddressBarElement}\n`;\n\nexport interface AddressBarLabelProps {\n  disabled?: boolean;\n}\n\nconst AddressBarLabel = styled.label<AddressBarLabelProps>`\n  ${(props) => props.theme.controls.AddressBarLabel}\n`;\n\nexport interface AddressBarInputContainerProps {\n  disabled?: boolean;\n}\n\nconst AddressBarInputContainer = styled.div<AddressBarInputContainerProps>`\n  ${(props) => props.theme.controls.AddressBarInputContainer}\n`;\n\nexport interface AddressBarInputProps {\n  disabled?: boolean;\n}\n\nconst AddressBarInput = styled.input<AddressBarInputProps>`\n  ${(props) => props.theme.controls.AddressBarInput}\n`;\n\nconst AddressBarIconElement = styled.img`\n  ${(props) => props.theme.controls.AddressBarIcon}\n`;\n\nexport interface AddressBarIconProps {\n  icon: string | Icon;\n  onClick(): void;\n}\n\nconst AddressBarIcon = ({ icon, onClick }: AddressBarIconProps) => {\n  const { theme } = useThemeManager();\n\n  const resolvedIcon = typeof icon === 'string' ? theme.icons[icon] : icon;\n  if (!resolvedIcon) {\n    return null;\n  }\n\n  const iconFile = getIconFileForSize(resolvedIcon);\n  return <AddressBarIconElement onClick={onClick} src={iconFile} />;\n};\n\nexport const AddressBar = ({\n  disabled,\n  icon,\n  label,\n  onChange,\n  value,\n}: AddressBarProps) => {\n  const inputRef = useRef(null);\n\n  const handleIconClick = () => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <AddressBarElement disabled={disabled}>\n      {label && <AddressBarLabel disabled={disabled}>{label}</AddressBarLabel>}\n      <AddressBarInputContainer disabled={disabled}>\n        {icon && <AddressBarIcon icon={icon} onClick={handleIconClick} />}\n        <AddressBarInput\n          ref={inputRef}\n          value={value}\n          disabled={disabled}\n          onChange={(event) => onChange(event.target.value)}\n        />\n      </AddressBarInputContainer>\n    </AddressBarElement>\n  );\n};\n\nexport default AddressBar;\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"controls-ComboBox-stories.7dd00366.iframe.bundle.js","mappings":";AAmBA;AAMA;AACA;AAGA;AACA;AAMA;AACA;AAMA;AACA;AASA;AACA;AAGA;AACA;AAWA;AC3DA;AAGA","sources":["webpack://@tatuarvela/wisp/./src/controls/ComboBox.tsx","webpack://@tatuarvela/wisp/./src/controls/ControlWrapper.tsx"],"sourcesContent":["import { Combobox as HeadlessComboBox } from '@headlessui/react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Portal } from 'react-portal';\nimport styled from 'styled-components';\n\nimport { useWindow } from '../window/WindowContext';\nimport ControlWrapper, { ControlWrapperProps } from './ControlWrapper';\n\nexport const ComboBoxThemeProperties = [\n  'ComboBoxButton',\n  'ComboBoxControl',\n  'ComboBoxInput',\n  'ComboBoxLabel',\n  'ComboBoxOption',\n  'ComboBoxOptions',\n  'ComboBoxWrapper',\n] as const;\n\nconst ComboBoxWrapper = styled(ControlWrapper)`\n  ${(props) => props.theme.controls.ComboBoxWrapper}\n`;\n\nexport interface ComboBoxLabelProps {\n  disabled?: boolean;\n}\nconst ComboBoxLabel = styled.label<ComboBoxLabelProps>`\n  ${(props) => props.theme.controls.ComboBoxLabel}\n`;\n\nconst ComboBoxControl = styled.div`\n  ${(props) => props.theme.controls.ComboBoxControl}\n`;\n\nexport interface ComboBoxButtonProps {\n  disabled?: boolean;\n}\nconst ComboBoxButton = styled(HeadlessComboBox.Button)<ComboBoxButtonProps>`\n  ${(props) => props.theme.controls.ComboBoxButton}\n`;\n\nexport interface ComboBoxInputProps {\n  disabled?: boolean;\n}\nconst ComboBoxInput = styled(HeadlessComboBox.Input)<ComboBoxInputProps>`\n  ${(props) => props.theme.controls.ComboBoxInput}\n`;\n\nexport interface ComboBoxOptionsProps {\n  open: boolean;\n  width: number;\n  left: number;\n  top: number;\n}\nconst ComboBoxOptions = styled(HeadlessComboBox.Options)<ComboBoxOptionsProps>`\n  ${(props) => props.theme.controls.ComboBoxOptions}\n`;\n\nconst ComboBoxOption = styled(HeadlessComboBox.Option)`\n  ${(props) => props.theme.controls.ComboBoxOption}\n`;\n\nexport interface ComboBoxProps extends ControlWrapperProps {\n  disabled?: boolean;\n  label?: string;\n  nullable?: boolean;\n  onChange(value?: string): void;\n  options: string[];\n  value?: string;\n}\nexport const ComboBox = ({\n  disabled,\n  label,\n  nullable,\n  onChange,\n  options,\n  value,\n  inlineLabel,\n}: ComboBoxProps) => {\n  const window = useWindow();\n  const controlRef = useRef<HTMLDivElement>(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [query, setQuery] = useState<string>('');\n  const [sizes, setSizes] = useState<{\n    width: number;\n    left: number;\n    top: number;\n  }>({ width: 0, left: 0, top: 0 });\n\n  useEffect(() => {\n    if (window) {\n      const rect = controlRef?.current.getBoundingClientRect() ?? {\n        width: 0,\n        left: 0,\n        top: 0,\n        height: 0,\n      };\n      setSizes({\n        width: rect.width,\n        left: rect.left,\n        top: rect.top + rect.height,\n      });\n    }\n  }, [window]);\n\n  const onInputClick = () => {\n    buttonRef?.current?.click();\n  };\n\n  const filteredOptions =\n    query === ''\n      ? options\n      : options.filter((option) => {\n          return option.toLowerCase().includes(query.toLowerCase());\n        });\n\n  return (\n    <HeadlessComboBox\n      disabled={disabled}\n      value={value ?? ''}\n      onChange={onChange}\n      nullable={nullable ? true : undefined}\n    >\n      {({ open }) => (\n        <ComboBoxWrapper inlineLabel={inlineLabel}>\n          {label && <ComboBoxLabel disabled={disabled}>{label}</ComboBoxLabel>}\n          <ComboBoxControl ref={controlRef}>\n            <ComboBoxInput\n              disabled={disabled}\n              onClick={onInputClick}\n              onChange={(event) => setQuery(event.target.value)}\n            />\n            <ComboBoxButton disabled={disabled} ref={buttonRef} />\n            <Portal>\n              <ComboBoxOptions\n                open={filteredOptions.length > 0 && open}\n                {...sizes}\n              >\n                {filteredOptions.map((option) => (\n                  <ComboBoxOption key={option} value={option}>\n                    {option}\n                  </ComboBoxOption>\n                ))}\n              </ComboBoxOptions>\n            </Portal>\n          </ComboBoxControl>\n        </ComboBoxWrapper>\n      )}\n    </HeadlessComboBox>\n  );\n};\n\nexport default ComboBox;\n","import styled from 'styled-components';\n\nexport const ControlWrapperThemeProperties = ['ControlWrapper'] as const;\n\nexport interface ControlWrapperProps {\n  inlineLabel?: boolean;\n}\n\n// internal\nconst ControlWrapper = styled.div<ControlWrapperProps>`\n  ${(props) => props.theme.controls.ControlWrapper}\n`;\n\nexport default ControlWrapper;\n"],"names":[],"sourceRoot":""}